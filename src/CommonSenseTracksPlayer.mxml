<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:flex="com.modestmaps.flex.*" implements="commentspace.IStatefulVis" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:ns1="components.*" 
	backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]">
	
	<mx:Canvas id="container" backgroundColor="0xffffff" 
		horizontalScrollPolicy="off" verticalScrollPolicy="off" creationComplete="{setup()}"
		left="10" top="10" right="10" bottom="30"/>
	<mx:Canvas id="glassPane" horizontalScrollPolicy="off" verticalScrollPolicy="off"  
		left="10" top="10" right="10" bottom="30" backgroundAlpha="0.01" backgroundColor="0xffffff">
		<mx:HBox top="10" id="myExposureBox" left="10" borderStyle="solid" borderColor="#9D9D9D" width="193" height="100" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" cornerRadius="5">
			<mx:Text id="myExposure" text="My Exposure:" styleName="csH1" color="#000000" fontSize="14"/>
		</mx:HBox>
		<mx:HBox bottom="85" left="10" backgroundColor="#242424" borderStyle="solid" borderColor="#9D9D9D" width="193" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" cornerRadius="5">
			<mx:VBox cornerRadius="15" width="115">
				<mx:Label text="{timeline &amp;&amp; timeline.playheadDate ? timeline.playheadDate.toLocaleTimeString() : ''}" styleName="csH1" color="#FFFFFF" fontSize="17"/>
				<mx:Label text="{timeline &amp;&amp; timeline.playheadDate ? timeline.playheadDate.toLocaleDateString() : ''}" styleName="csH1" color="#FFFFFF" fontSize="14"/>
			</mx:VBox>
			<mx:Button label="{timeline._playing ? '||' : '&gt;'}"
				toolTip="{timeline._playing ? 'pause' : 'play'}" height="100%" fontSize="23" id="bigPlayPause" 
				click="{timeline._playing ? timeline.stopPlayback(event) : timeline.startPlayback(event)}" width="55"/>
		</mx:HBox>
	</mx:Canvas>
	
	<ns1:AirQualityTimeLine id="timeline" height="80" creationComplete="{setup()}" 
		bottom="30" left="10" right="10" margin="5" timeMultiplier="25" useAdvancedControls="false"/>
	<ns1:AirQualityLegend height="25" bottom="5" left="10" right="10"/>
		
	<mx:ProgressBar id="progressBar" visible="true" includeInLayout="false" mode="manual" left="40" right="20" bottom="50"/>	

	<mx:Script>
		<![CDATA[
			import components.loading.TracksPlayerLoadingPanel;
			import com.adobe.serialization.json.JSON;
			import commentspace.events.EntityEvent;
			import mx.events.CollectionEventKind;
			import mx.events.CollectionEvent;
			import events.TimelineEvent;
			import events.DataSetEvent;
			import data.SelectionSet;
			import data.AirQualityDataSet;
			import __AS3__.vec.Vector;
			import components.DisclaimerPanel;
			import events.CSEvent;
			import events.DataPointEvent;
			import mx.managers.PopUpManager;
			import components.loading.DataLoadingPanel;
			import components.AirQualityMapLayer;
			import etc.AirQualityColors;
			import mx.messaging.AbstractConsumer;
			import mx.effects.Zoom;
			import com.modestmaps.mapproviders.microsoft.MicrosoftHybridMapProvider;
			import com.modestmaps.events.MarkerEvent;
			import com.modestmaps.TweenMap;
			import com.modestmaps.extras.ui.Button;
			import mx.events.ResizeEvent;
			import com.modestmaps.events.MapEvent;
			import commentspace.StatefulVisEvent;
			import com.modestmaps.overlays.MarkerClip;
			import mx.events.MenuEvent;
			import mx.controls.Menu;
			import com.modestmaps.Map;
			import com.modestmaps.extras.ZoomSlider;
			import com.modestmaps.extras.MapControls;
			import flash.sampler.Sample;
			import com.modestmaps.geo.Location;
			
			/******** Embedded Assets **********************************************************/
			[Embed(source="assets/flag_blue.png")]
			protected const BlueFlagIcon:Class;
			[Embed(source="/assets/comment_flag.png")]
			protected const CommentIcon:Class;
			[Embed(source="assets/cross.png")]
			protected const CancelIcon:Class;
			
			
			/******** Source Data **********************************************************/
			//[Embed(source = "assets/2009-05-14 (West Oakland PM + GPS).csv", mimeType="application/octet-stream")]
			//protected const Embedded20090514PMData:Class;
			//protected const outside20090514PMData:String = "http://www.eecs.berkeley.edu/~willettw//temp/2009-05-14%20(West%20Oakland%20PM%20+%20GPS).csv?";

			
			/******** Constants **********************************************************/
			protected const CLICK_RADIUS:Number = 2;
			
			protected static const DESATURATION_MATRIX:Array = [
					0.3, 0.59, 0.3, 0, 0,
		            0.3, 0.59, 0.3, 0, 0,
		            0.3, 0.59, 0.3, 0, 0,
		            0, 0, 0, 0.5, 0
		        ];
			
			/******** Local Vars **********************************************************/
			protected var maxPoints:int = 1000;
			
			//the map!
			protected var map:TweenMap;
			
			//Clip the flags are drawn into
			protected var _flagsClip:MarkerClip;
			
			//Clip the textures are drawn into
			protected var _plotLayer:AirQualityMapLayer;
			
			//The backing data sets for the visualization
			protected var _dataSets:Vector.<AirQualityDataSet> = new Vector.<AirQualityDataSet>();
			
			//An object containing a list of selections 
			protected var _selections:SelectionSet = new SelectionSet();
			
			//flag to prevent updated events from being dispatched during panAndZoomTo runs
			protected var _isPanningAndZooming:Boolean = false; 
			
			protected var firstLoad:Boolean = false;
			protected function setup():void{
				if(!firstLoad) firstLoad = true;
				else{
					setupMap();
					setupTimeline();
				}
			}
			
			//tracks last point drawn on playback
			protected var _lastDrawn:int = 0;
			
			/******** Mapping Methods **********************************************************/
			protected function setupMap():void{
				
				map = new TweenMap();
				map.setMapProvider(new MicrosoftHybridMapProvider(10,19));
				map.grid.filters = [new ColorMatrixFilter(DESATURATION_MATRIX)];
				container.rawChildren.addChild(map);
				
				map.x = 0;
				map.y = 0;
				map.setSize(container.width,container.height);
				
				map.panDuration = 0.6;
				map.zoomDuration = 0.5;
				map.panAndZoomDuration = 0.6;
				
				_plotLayer = new AirQualityMapLayer(map);
				_plotLayer.dataSets = _dataSets;
				_plotLayer.selections = _selections;
				
				
				map.addChild(_plotLayer);
				//map.addChild(_flagsClip);
				
				//map.addChild(new MapControls(map));

				//set the map center
				map.setCenterZoom(new Location(37.803,-122.298),17);
				
				//Listeners for updating state 
				map.addEventListener(MapEvent.STOP_PANNING, dispatchUpdated);
				map.addEventListener(MapEvent.STOP_ZOOMING, dispatchUpdated);
				map.addEventListener(CSEvent.PAN_AND_ZOOM_COMPLETE, dispatchUpdated);
				
				this.addEventListener(ResizeEvent.RESIZE,onResize);
				
				//Listener for zoom and pan
				map.addEventListener(MouseEvent.DOUBLE_CLICK,function(me:MouseEvent):void{
						var location:Location = map.pointLocation(map.globalToLocal(new Point(me.stageX,me.stageY)),map);
						panAndZoomTo(location,map.getZoom() + 1);
					});
				
				//A function for loading a default set of data		
				//TODO: make this cleaner
				var runOnStartup:Function = function():void{
					var request:URLRequest = new URLRequest(DataLoadingPanel.DATA_INDEX_XML_URL);
					var loader:URLLoader = new URLLoader(request);
					
					loader.addEventListener(Event.COMPLETE,function(e:Event):void{
							var indexString:String = loader.data;
							indexString = indexString.replace(/BASE_DB_QUERY_URL/gi,DataLoadingPanel.BASE_DB_QUERY_URL);
							indexString = indexString.replace('24HOURSAGO',int((new Date().time) / 1000 - 24 * 3600));
							indexString = indexString.replace('1WEEKAGO',int((new Date().time) / 1000 - 7 * 24 * 3600));
							var indexArray:Array = JSON.decode(indexString).defaults as Array;
							
							if(indexArray && indexArray.length > 0){
								var loading:int = indexArray.length;
								for each(var def:Object in indexArray){
									loadData(def.url,def.reading,def.name,function():void{ 
										loading--;
										if(loading == 0)dispatchComplete(); 
									});	
								}	
							}
						});
					};	
					
				var quickStartup:Function = function ():void{
					/* var quickdata:Object = {"name":"All Badges Carbon Monoxide (past 3 hours)",
						"url":DataLoadingPanel.BASE_DB_QUERY_URL +"?reading=mco&start_time=" + int((new Date().time) / 1000 - 3 * 3600),
						"reading":"co"}; */
					/* var quickdata:Object = {"name":"Badges 4 Carbon Monoxide (past 3 hours)",
						"url":DataLoadingPanel.BASE_DB_QUERY_URL +"?badge=000000000004&reading=mco&start_time=" + int((new Date().time) / 1000 - 3 * 3600),
						"reading":"co"}; 
					loadData(quickdata.url,quickdata.reading,quickdata.name,function():void{centermap();dispatchComplete();}); */
					//var pmRootDir:String = "http://www.commonsensecommunity.com/data/WestOaklandMostRecentPM/";
					var pmRootDir:String = "http://www.wjwillett.net/temp/WestOaklandMostRecentPM/";
					var dirRequest:URLRequest = new URLRequest(pmRootDir);
					var dirLoader:URLLoader = new URLLoader(dirRequest);
					dirLoader.addEventListener(Event.COMPLETE, function(e:Event):void{
							var pmSourceFiles:Array = (dirLoader.data as String).match(/(?<=href=\").+csv(?=\">)/gi);
							for(var i:int=0; i< pmSourceFiles.length; i++) pmSourceFiles[i] = pmRootDir + pmSourceFiles[i];
							var info:Object = {name:"West Oakland PM", source:pmSourceFiles,reading:"pm25"};
												
							loadData(info.source,info.reading,info.name,function():void{centermap();dispatchComplete();});
						});
				}
					
				//Requires a click-through disclaimer before using the site	
				//triggerDisclaimerPopup(runOnStartup);
				//Jump straight into a load
				//runOnStartup();
				quickStartup();	
				//Alternative startup, just pops up the loader
				//triggerLoadingPopup();
				//plotExistingMarkers(); //probably removed forever?				
				//let commentspace know we're loaded
				//dispatchComplete();	
					
			}
			
			protected function setupTimeline():void{

				timeline.dataSets = _dataSets;
				timeline.selections = _selections;
				
				//Add handlers for linked tooltipping between map and timeline
				var drawMapTip:Function = function(de:DataPointEvent=null):void{
						_plotLayer.drawDataTip(de.dataPoint);
					};
				var drawTimelineTip:Function = function(de:DataPointEvent=null):void{
						timeline.drawDataTip(de.dataPoint);
					};
				var discardMapTip:Function = function(de:DataPointEvent=null):void{
						_plotLayer.discardActiveDataTip();
					};
				var discardTimelineTip:Function = function(de:DataPointEvent=null):void{
						timeline.discardActiveDataTip();
					};
				timeline.addEventListener(DataPointEvent.HOVER,drawMapTip);
				timeline.addEventListener(DataPointEvent.UNHOVER,discardMapTip);
				_plotLayer.addEventListener(DataPointEvent.HOVER,drawTimelineTip);
				_plotLayer.addEventListener(DataPointEvent.UNHOVER,discardTimelineTip);
				
				//handlers for popup menus on map and timeline
				timeline.addEventListener(DataPointEvent.CLICK,function(de:DataPointEvent):void{
						discardTimelineTip();	
						createMenu(de.mousePosition,de.dataPoint);
						
					});
				_plotLayer.addEventListener(DataPointEvent.CLICK,function(de:DataPointEvent):void{
						discardMapTip();
						createMenu(de.mousePosition,de.dataPoint);
					});
				
				//handler for dataset removal
				timeline.addEventListener(DataSetEvent.DATASET_REMOVED,function(de:DataSetEvent):void{			
						_plotLayer.refresh(true);
						timeline.refresh(true);
						dispatchUpdated();
					});
					
				//time scrubbing for map
				timeline.addEventListener(TimelineEvent.PLAYHEAD_MOVED,function(te:TimelineEvent):void{
						if(te.playheadTime){
							_plotLayer.maxTime = te.playheadTime;
																					
							//Centers map on the last point
							//FIXME: This is a VERY quick implementation that loops through all the points every time.
							// optimize the search for the last point(e.g. only check since the last update) and 
							// smooth the playback
							var endTimes:Object = (_dataSets[0] as AirQualityDataSet).stats.getEpisodeEndTimes();
								
							if(_dataSets[0] && (_dataSets[0] as AirQualityDataSet).data){
								var ds:AirQualityDataSet = (_dataSets[0] as AirQualityDataSet);
								
								//iterate through points
								for(var i:int=_lastDrawn+1; i < ds.data.length; i++){
									var point:Object = ds.data[i]; 
									
									//pause and trigger a prompt if this window is above average
									if(endTimes[point.time] > 0.010){
										timeline.stopPlayback();
										_lastDrawn = i;
										dispatchEvent(new Event("aboveThreshold",true));
									}
									
									//Save the index of the last point drawn at/after the playhead 							
									if(Number(point.time) > te.playheadTime){
										//recenter 
										if(point.lat && point.lat != "None" && point.lat !=0){
											map.setCenterZoom(new Location(Number(point.lat),Number(point.lon)),17);
										}
										break;
									}
								}
							}
							_plotLayer.refresh();
						} 
					});
				
				//Listeners for updating state on zoom and pan
				timeline.addEventListener(TimelineEvent.TIMELINE_ZOOMED,dispatchUpdated);
				timeline.addEventListener(TimelineEvent.TIMELINE_SCROLLED,dispatchUpdated);
				
				//Update state whenever the timeline stops (do not try to update during playback)
				timeline.addEventListener(TimelineEvent.PLAYHEAD_STOPPED,dispatchUpdated);
			}
			
			
			/**
			 * Loads data from a source and passes it to the timeline and map when complete.
			 *  Manages the progress bar while loading. 
			 */
			protected function loadData(source:Object,pollutant:String,name:String=null,onComplete:Function=null):void{
				
				//if this same source has already been loaded, remove it before reloading.
				for each(var d:AirQualityDataSet in _dataSets){
					if(d.dataURI == source) _dataSets.splice(_dataSets.lastIndexOf(d),1);
				}
				
				progressBar.visible = true;
				progressBar.includeInLayout = true;
				
				var handleProgress:Function = function(pe:ProgressEvent):void{
					progressBar.setProgress(pe.bytesLoaded,pe.bytesTotal);
					progressBar.label = (int(pe.bytesLoaded / pe.bytesTotal * 100) + 
						"% (" + pe.bytesLoaded + " of " + pe.bytesTotal + " bytes)");
				}
				
				var ds:AirQualityDataSet = new AirQualityDataSet(source,pollutant,name) 
				ds.addEventListener(ProgressEvent.PROGRESS, handleProgress);
				ds.addEventListener(Event.COMPLETE, function(e:Event):void{
						progressBar.visible = false;
						progressBar.setProgress(0,1);
						progressBar.includeInLayout = false;
						_dataSets.push(ds);
						timeline.refresh(true);
						_plotLayer.refresh(true);
						dispatchUpdated();
						if(onComplete != null) onComplete();
						
						// Calculated Average for My Exposure box
						myExposureBox.setStyle("backgroundColor", AirQualityColors.getColorForValue("pm25", ds.stats.getMyExposureAverage()));
						var exposure:String = "My Exposure: "+AirQualityColors.getAQICategoryForValue("pm25", ds.stats.getMyExposureAverage());
						var aqivalue:String = "Air Quality Index: "+String(
																			Math.round(2 * AirQualityColors.getAQIValueForValue("pm25", ds.stats.getMyExposureAverage())) / 2 
											 	 					  	  );
						myExposure.text = exposure + "\n" + aqivalue + "\n" + "This is your exposure\nover a 24-hour period";
				});
			}
			
			
			/**
			 * Forces all of the loaded datasets to reload from scratch.
			 */
			protected function reloadDataSets():void{
				var oldDataSets:Vector.<AirQualityDataSet> = new Vector.<AirQualityDataSet>();
				while(_dataSets.length > 0) oldDataSets.push(_dataSets.pop());
				for each(var d:AirQualityDataSet in oldDataSets){
					loadData(d.sourceObject,d.pollutant,d.name);					
				}
			}
			
			
			/** Pops up a menu that allows markers to be
			 *   added to the display.
			 */
			protected function createMenu(mousePt:Point,dataPoint:Object):void{
				
				//Short-term solution, always center on point click, bypassing the menu
				if(dataPoint.lat && dataPoint.lat != "None") panAndZoomTo(new Location(dataPoint.lat, dataPoint.lon),map.getZoom());
				if(dataPoint.time) timeline.centerOn(dataPoint.time);
				
				/*
				//set up menu XML
				var menuXML:XML = XML(<root/>);
				var centerXML:XML = XML(<item/>);
				centerXML.@label = 'Center Views on This Point';	
				centerXML.@event = 'center';
				menuXML.appendChild(centerXML);
				
				//TODO:Enable Commenting functionality.
				if(_selections.isSelected(dataPoint)){
					var viewXML:XML = XML(<item/>);
					viewXML.@label = 'View Comments for this Data Point';	
					viewXML.@icon = 'CommentIcon';
					viewXML.@event = 'view';
					menuXML.appendChild(viewXML);
				}
				else{
					var addXML:XML = XML(<item/>);
					addXML.@label = 'Comment on this data point';	
					addXML.@icon = 'CommentIcon';
					addXML.@event = 'add';
					menuXML.appendChild(addXML);
				}
				
				var cancelXML:XML = XML(<item/>);
				cancelXML.@label = 'Cancel';
				cancelXML.@icon = 'CancelIcon';
				cancelXML.@event = 'cancel';
				menuXML.appendChild(cancelXML);

				//build and display menu
				var menu:Menu = Menu.createMenu(map,menuXML,false);
				menu.labelField = "@label";
				menu.iconFunction = iconFunction;
				menu.addEventListener(MenuEvent.ITEM_CLICK,function(me:MenuEvent):void{
						//When Add is clicked - add selection
						if(me.item.@event == 'add'){
							var s:Object = _selections.addSelection(dataPoint.id);
							_plotLayer.refresh(true);
							timeline.refresh(true);
						}
						//When Add is clicked - center both views on point
						else if(me.item.@event == 'center'){
							if(dataPoint.lat && dataPoint.lat != "None") panAndZoomTo(new Location(dataPoint.lat, dataPoint.lon),map.getZoom());
							if(dataPoint.time) timeline.centerOn(dataPoint.time);
						}
						//When view is clicked, focus that selection
						else if(me.item.@event == 'view'){
							var dSel:Array = _selections.getSelections(dataPoint);
							if(dSel && dSel.length > 0) dispatchEvent(new EntityEvent(EntityEvent.ENTITY_FOCUSED,dSel[0]));
							
						}
						//otherwise, hide the menu
						else menu.hide();
					});
					
	            menu.show(mousePt.x, mousePt.y);*/
			}
			
			/**
			 * Pans and zooms to a specific point and zoom level.
			 *  If this takes longer than expected, cut to the chase and just jump 
			 *  to the specified loc/zoom - this circumvents a bug where modest maps
			 *  can hang indefinitely when panning.
			 */
			protected function panAndZoomTo(loc:Location,zoom:int):void{
				
				if(_isPanningAndZooming) return; //don't try to run if one is underway
				_isPanningAndZooming = true;
				var mapZoom:int = map.getZoom();
				
				//We'll skip to the point if the pan takes 50% longer than expected. 
				var t:Timer = new Timer(1000 * map.panDuration * 1.5);
				
				//If panning completes successfully, then zoom
				var onPZPan:Function = function(me:MapEvent):void{
						map.removeEventListener(MapEvent.STOP_PANNING,onPZPan);
						map.zoomByAbout(zoom - mapZoom);
					}
				
				//If zooming completes or the timer expires, do a final recenter and dispatch events
				var onPZComplete:Function = function(e:Event=null):void{
						
						//Remove listeners
						t.stop();
						t.removeEventListener(TimerEvent.TIMER,onPZComplete);
						map.removeEventListener(MapEvent.STOP_PANNING,onPZPan);
						map.removeEventListener(MapEvent.STOP_ZOOMING,onPZComplete);
						
						
						var newCenter:Location = map.getCenter();
						var newZoom:Number = map.getZoom();
						
						//Recenter if our zooming misaligns the result of the pan
						if(!locEquals(loc,newCenter)){
							map.setCenter(loc);
						} 
						if(newZoom != zoom){
							 map.setZoom(zoom);	
						}
						
						if(!locEquals(loc,newCenter) || map.getZoom() != zoom){
							newCenter = map.getCenter(); newZoom = map.getZoom();
							trace("Error: Center and Zoom still are not correct after realign!");
						}
						
						_isPanningAndZooming = false;
						map.dispatchEvent(new CSEvent(CSEvent.PAN_AND_ZOOM_COMPLETE));
					}				
							
				//Add Listeners
				map.addEventListener(MapEvent.STOP_PANNING, onPZPan);
				map.addEventListener(MapEvent.STOP_ZOOMING, onPZComplete);
				t.addEventListener(TimerEvent.TIMER, onPZComplete);
								
				//Start the panning an timer
				t.start();
				map.panTo(loc);
			}
			
			/**
			 * Center the map (currently on the last plotted data point)
			 */
			protected function centermap():void{
				var last:Object;
				for each(var d:AirQualityDataSet in _dataSets){
					for(var di:int=0; di < d.data.length; di++){
						var dl:Object = d.data[di];
						if((!last || last.time < dl.time) && dl.lat && dl.lon && dl.lat!="None") last = dl;
						if(_plotLayer.maxTime > 0 && dl.time >= _plotLayer.maxTime) break;
					}	
				}
				if(last) panAndZoomTo(new Location(last.lat,last.lon), map.getZoom());
			}
						
			
			/******** Implements IStatefulVis *************************************************/	
				
			protected var _setStateReady:Boolean = false;	
			public function get setStateReady():Boolean{ return _setStateReady; }
				
			
			public function get state():Object{
				var cz:Array = map.getCenterZoom();
				var cl:Location = roundLocation(cz[0] as Location);
				var ds:String;
				var dsn:String;
				var dsp:String;
				var dsorted:Array = [];
				for each(var d:AirQualityDataSet in _dataSets) dsorted.push(d);
				dsorted.sortOn("dataURI"); 
				for each(var di:AirQualityDataSet in dsorted){
					ds = (ds == null ? di.dataURI : ds + ";" + di.dataURI);
					dsn = (dsn == null ? escape(di.name) : dsn + "," + escape(di.name));
					dsp = (dsp == null ? escape(di.pollutant) : dsp + "," + escape(di.pollutant));
				} 
				return {centerLat:cl.lat,
						centerLon:cl.lon,
						zoom:cz[1],
						dataSource:ds,
						dataNames:dsn,
						dataPollutants:dsp,
						xBottom:timeline.xBottom,
						xTop:timeline.xTop,
						playheadPosition:timeline.playheadPosition};
			}
			
			public function set state(o:Object):void{
				
				//parameters to be set once we know the data's loaded
				var onceLoaded:Function = function():void{
						//pan and zoom appropriately
						panAndZoomTo(new Location(o.centerLat,o.centerLon),o.zoom);
						
						//set time bounds
						timeline.xBottom = o.xBottom;
						timeline.xTop = o.xTop;
						timeline.playheadPosition = o.playheadPosition;
						timeline.refresh();
					};

				//get names, uris, and pollutants of datasets in state
				var ds:Array = (o.dataSource is String) ? (o.dataSource as String).split(';') : null;
				for each(var dss:String in ds) if(dss.lastIndexOf(',') != -1) ds.splice(ds.indexOf(dss),1,dss.split(','));
				var dsn:Array = (o.dataNames is String) ? (o.dataNames as String).split(',') : null;
				var dsp:Array = (o.dataPollutants is String) ?(o.dataPollutants as String).split(',') : null;
				
				var loadingCount:int = 0;
				
				//pull old datasets
				var oldDataSets:Vector.<AirQualityDataSet> = new Vector.<AirQualityDataSet>();
				while(_dataSets.length > 0) oldDataSets.push(_dataSets.pop());
				
				//loook for specified datasets via URI
				if(ds){
					for(var i:int=0;i<ds.length;i++){
						var dsi:String = ds[i];
						//if we have an old dataset that matches, keep it
						var match:Boolean = false;
						for each(var ods:AirQualityDataSet in oldDataSets){
							if(ods.dataURI == dsi){
								match = true;
								_dataSets.push(ods);
								break;
							}
						}
						//otherwise, load from outside
						if(!match){
							loadingCount++; 
							loadData(dsi,unescape(dsp[i]),unescape(dsn[i]),function():void{
									loadingCount--;
									if(loadingCount == 0)onceLoaded();
								});
						}
					}					
				}
				if(loadingCount == 0)onceLoaded();
				
			}
			
			protected function dispatchComplete(e:Event = null):void{
				_setStateReady = true;
				dispatchEvent(new StatefulVisEvent(StatefulVisEvent.VIS_CREATION_COMPLETE,true));
			}
			
			protected function dispatchUpdated(e:Event = null):void{
				if(_isPanningAndZooming) return; //don't dispatch during the middle of a panAndZoom() run
				dispatchEvent(new StatefulVisEvent(StatefulVisEvent.VIS_UPDATE,true));
			}
			
			/* Security settings - should be constrained before deployment!
			 *  These settings allow this code to be loaded into and accessed by 
			 *  a Flash movie on ANY external server. *****************************/
			Security.allowDomain("*");
			Security.allowInsecureDomain("*");
			
			
			/******** Helper Methods **********************************************************/
				
			public function onResize(event:Event):void
			{	
				var mc:Location = map.getCenter(); 
				map.setSize(this.width, this.height);
				map.setCenter(mc);
				
			}	
			
			/**Checks if two locations are equal to some level of precision */
			protected function locEquals(a:Location,b:Location,precision:uint=10):Boolean{
				return (a.lat.toPrecision(precision) == b.lat.toPrecision(precision) 
					&& a.lon.toPrecision(precision) == b.lon.toPrecision(precision));
			}
			
			/**Returns a location with lat/lon rounded to some level of precision */
			protected function roundLocation(l:Location,precision:uint=10):Location{
				return new Location(Number(l.lat.toPrecision(precision)),Number(l.lon.toPrecision(precision)));
			}
				
				
			/**
			 * A workaround which sets icons in the menus using a 
			 *  function since the standard @icon attribute in the
			 *  XML doesn't work unless the imports are at the application
			 *  root. 
			 * @param o
			 * @return 
			 * 
			 */		
			protected function iconFunction(o:Object):Class{
				if((o as XML).attributes().icon){
					var iconName:String = o.@icon;
					if(!iconName || iconName == "") return null;
					var iconClass:Class = this[iconName] as Class;
					return iconClass;				
				}
				else return null;
			}
			
			
			/**
			 * Triggers a disclaimer popup.
			 */
			protected function triggerDisclaimerPopup(onOkay:Function=null):void{
				var disclaimer:DisclaimerPanel = new DisclaimerPanel();
				disclaimer.onOkay = function():void{
						if(onOkay != null) onOkay();
						PopUpManager.removePopUp(disclaimer);
					};
				PopUpManager.addPopUp(disclaimer,this,true);
				PopUpManager.centerPopUp(disclaimer);
			}
			
			/**
			 * Triggers a popup display that allows data to be loaded from
			 *  outside.
			 */
			protected function triggerLoadingPopup():void{
				var loadPanel:TracksPlayerLoadingPanel = new TracksPlayerLoadingPanel();
				
				//when the okay button is clicked
				loadPanel.onLoadClick = function(e:Event=null):void{
						var info:Array = loadPanel.getSelectedInfo();
						if(info && info.length > 0){
							
							//DEBUG - loads all files from the west oakland PM directory
							var pmRootDir:String = "http://www.commonsensecommunity.com/data/WestOaklandPM/";
							var dirRequest:URLRequest = new URLRequest(pmRootDir);
							var dirLoader:URLLoader = new URLLoader(dirRequest);
							dirLoader.addEventListener(Event.COMPLETE, function(e:Event):void{
									var pmSourceFiles:Array = (dirLoader.data as String).match(/(?<=href=\").+csv(?=\">)/gi);
									for(var i:int=0; i< pmSourceFiles.length; i++) pmSourceFiles[i] = pmRootDir + pmSourceFiles[i];
									var info:Object = {name:"West Oakland PM", source:pmSourceFiles,reading:"pm25"};
														
									loadData(info.source,info.reading,info.name,function():void{centermap();dispatchComplete();});
								});
						} 
						PopUpManager.removePopUp(loadPanel);
					};
					//when the cancel button is clicked
					//when the okay button is clicked
				loadPanel.onCancelClick = function(e:Event=null):void{
						PopUpManager.removePopUp(loadPanel);
					};
				PopUpManager.addPopUp(loadPanel,this,true);
				PopUpManager.centerPopUp(loadPanel);
			}
			
		]]>
	</mx:Script>
	<mx:Style source="assets/commonsensestyles.css"/>
	

	
</mx:Application>
