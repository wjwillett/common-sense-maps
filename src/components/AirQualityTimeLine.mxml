<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:display="flash.display.*"  height="70"
	backgroundColor="0xDDCCCCCC" backgroundAlpha="0.8" 
	mouseUp="{stopPlayHeadDrag(event)}" rollOut="{stopPlayHeadDrag(event)}"
	horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	<mx:VRule id="tipLine" top="{margin}" bottom="{margin}" visible="false"/>
	
	<mx:Canvas id="container"  x="{margin + 45}" width="{width - (2 * margin) - 45}" 
		top="{margin}" height="{height - 2 * margin - SCROLLBAR_HEIGHT}" resize="{dirty.dirty();refresh()}" 
		mouseOver="{handleMouseMove(event)}" mouseOut="{handleMouseOut(event)}" 
		mouseMove="{handleMouseMove(event);playHeadDrag(event)}" click="{handleMouseClick(event)}" 
		doubleClick="{handleDoubleClick(event)}"
		horizontalScrollPolicy="off" verticalScrollPolicy="off"
		doubleClickEnabled="true" color="#aa2222"/>
		
	<mx:Canvas id="playhead" top="{margin}" bottom="{margin + SCROLLBAR_HEIGHT}" 
		x="{container.x + container.width}" width="6" useHandCursor="true"
		mouseChildren="false" buttonMode="true"
		mouseDown="{startPlayHeadDrag(event)}" 
		backgroundAlpha="0.4" backgroundColor="#FFFFFF">
		<mx:VRule x="{playhead.width / 2}" height="100%"/>
	</mx:Canvas>
	
	<mx:Canvas id="labels" mouseEnabled="false" x="{margin + 45}" width="100%" height="100%" />
		
	<mx:Button id="zOut" click="{zoomOut()}" label="-" toolTip="zoom out" 
			x="{margin}" y="{margin + 25}" paddingLeft="0" paddingRight="0" width="25"/>
	<mx:Button id="zIn" click="{zoomIn()}" label="+" 
			toolTip="zoom in" width="25" paddingLeft="0" 
			paddingRight="0" y="{margin}" x="{margin}"/>

	<mx:Button id="pauseBtn" x="{margin}" label="||" bottom="{margin}" enabled="{_playing}" 
		paddingRight="0" paddingLeft="0" click="{stopPlayback(event)}" width="18"/>
	<mx:Button id="playBtn" x="{margin + 20}" label=">" bottom="{margin}" enabled="{!_playing}"
		paddingRight="2" paddingLeft="2" click="{startPlayback(event)}" width="20"/>
	<mx:VSlider id="playSlider" x="{margin }" y="{playBtn.y - 60}" height="50" value="3"
		minimum="0.3" maximum="4" labels="{['.','..','...','....']}" dataTipFormatFunction="{playScrollDataTip}"
		toolTip="{int(Math.pow(10,playSlider.value)) + 'x Playback'}" liveDragging="true"
		change="{timeMultiplier=Math.pow(10,playSlider.value)}"/>
	
	
	<mx:Script>
		<![CDATA[
			import etc.DirtyFlag;
			import events.TimelineEvent;
			import mx.messaging.AbstractConsumer;
			import events.DataSetEvent;
			import mx.messaging.channels.PollingChannel;
			import etc.PointRenderer;
			import mx.events.CollectionEventKind;
			import mx.events.CollectionEvent;
			import data.SelectionSet;
			import data.AirQualityDataSet;
			import events.CSEvent;
			import etc.AirQualityColors;
			import events.DataPointEvent;
			import mx.controls.ToolTip;
			import mx.core.IToolTip;
			import mx.managers.ToolTipManager;
			import fl.events.ScrollEvent;
			import fl.controls.ScrollBarDirection;
			import fl.controls.ScrollBar;
			import __AS3__.vec.Vector;
			
			//------------- Public variables -----------------------------------------------
			public var xDataField:String = 'time';
			public var yDataField:String = 'value';
			public var margin:Number = 15;
			public var spacing:Number = 5;
			public var pointDiameter:Number = 6;
			public var pointOverlapTolerance:Number = 6;
			public var zoomPercentage:Number = 0.6;
			//public var numMouseOverAdjacents:uint = 15;
			
			
			/**
			 * A data object should be an Object containing
			 *  sets of points (as Vector.<Object>s) 
			 *  indexed by the URI of that set of points.  
			 * @param d
			 */	
			public function get dataSets():Vector.<AirQualityDataSet>{return _dataSets;}
			public function set dataSets(d:Vector.<AirQualityDataSet>):void{
				_dataSets = d;
				refresh(true);
			}
			
			/**
			 * A set of selections to draw.
		 	 */		
			public function get selections():SelectionSet{ return _selections;}
			public function set selections(s:SelectionSet):void{
				_selections = s;
				s.addEventListener(CollectionEvent.COLLECTION_CHANGE, function(ce:CollectionEvent):void{
						dirty.dirty();
						refresh();
					});
			}
			
			/**
			 * Indicates the current location of the playhead in terms of the xDataField
			 */
			[Bindable(event=TimelineEvent.PLAYHEAD_MOVED)]
			public function get playheadPosition():Number{
				if(playhead && playhead.x){
					return xPosToXVal(playhead.x - container.x); 					
				}
				else return xMax;
			}
			
			
			//------------- Data Management variables -----------------------------------------------
			protected var _dataSets:Vector.<AirQualityDataSet>;
			protected var yMin:Number;		//the lowest data value on the y axis
			protected var yMax:Number; 		//the highest data value on the y axis
			protected var xMin:Number;		//the lowest data value on the x axis
			protected var xMax:Number;		//the lowest data value on the x axis
			
			protected var xBottom:Number;	//the bottom end of the current display x-axis
			protected var xTop:Number;		//the top end of the current display x-axis
			
			protected var _dSetBounds:Object = {} //the screen bounds of the regions reserved for each dataset (indexed by URI)
			protected var _dSetLabels:Object = {} //labels for each dataset's region (indexed by URI)
			protected var _selections:SelectionSet; //the set of selections to draw in the current display 
			
			protected var _bitmap:Bitmap;
			protected var _mask:Sprite = new Sprite();
			protected var _hScroll:ScrollBar = new ScrollBar();
						
			protected var _prevMaxPtNums:Object = {}; 	//last point number drawn by the last append pass (indexed by dataURI)
			protected var _prevPos:Object = {} 			//position of the last point drawn (indexed by dataURI)
		
			protected var dirty:DirtyFlag = new DirtyFlag();
		
			protected const SCROLLBAR_HEIGHT:Number = 18;
			
			//-------------Public Methods -----------------------------------------------------

			public function refresh(force:Boolean=false):void{
				if(force) calculateMinMax();
				if(isNaN(yMin) || isNaN(yMax)) return;
				else plotData();
			}
			
			
			//------------- Protected Methods -----------------------------------------------------
				
			protected function plotData(e:Event=null):void{
				
				if(!container) return;

				//If no data do nothing
				if(!dataSets || dataSets.length == 0){
					while(container.rawChildren.numChildren > 0)container.rawChildren.removeChildAt(0);
					plotLabels();
					return;
				}
				
				if(dirty.check(DirtyFlag.CLEAN)) return;
				
				//if marked dirty (not just adding a few points) clean up
				if(dirty.check(DirtyFlag.DIRTY)){
					_prevMaxPtNums = {};
					_prevPos = {};
					while(container.rawChildren.numChildren > 0)container.rawChildren.removeChildAt(0);
				} 
				
				//prep the renderer and bitmap data we'll use to draw the points
				var plotBitmapData:BitmapData
				if(dirty.check(DirtyFlag.DIRTY) || !_bitmap){
					if(plotBitmapData) plotBitmapData.dispose();
					plotBitmapData = new BitmapData(container.width * 2,container.height,true,0x00FFFFFF);
				} 
				else plotBitmapData = _bitmap.bitmapData;
				var renderer:PointRenderer = new PointRenderer(plotBitmapData,pointDiameter,pointOverlapTolerance);
				
				//draw outside the current range so that scrolling 
				// cuts less abruptly
				var curRange:Number = xTop - xBottom;
				var xbd:Number = Math.max(xMin,xBottom - curRange);
				var xtd:Number = Math.min(xMax,xTop + curRange);
				
				//allocate space for each point set
				_dSetBounds = {};
				var psHeight:Number = (container.height -  
					(dataSets.length - 1) * spacing) / dataSets.length;
				var psBounds:Rectangle = new Rectangle(0,0,container.width,psHeight);

				plotBitmapData.lock();
				
				if(_dataSets && _dataSets.length > 0){
										
					//for each of the sets of points...
					for each(var ds:AirQualityDataSet in _dataSets){
						var pSet:Vector.<Object> = ds.data;
						
						//If we've already reused this renderer, ignore its previous points
						renderer.ignorePrevPoints();
						
						//set bounds for the set
						_dSetBounds[ds.dataURI] = psBounds.clone();
						if(dirty.check(DirtyFlag.DIRTY)) plotAxes(plotBitmapData,psBounds);
						psBounds.y += (psHeight + spacing);
						
						//skip if no data
						if(!ds.data) continue;
						
						//start from the last drawn point if possible					
						var playheadPt:Number = NaN;
						var firstPoint:int =  _prevMaxPtNums[ds.dataURI] ?  _prevMaxPtNums[ds.dataURI] : 0;
						
						//iterate through points
						for(var i:int=firstPoint; i < ds.data.length; i++){
							var point:Object = ds.data[i]; 
							if(point.time < xbd || point.time > xtd) continue;
							
							//skip everything after the playhead if we've already drawn it
							if(point.time > playheadPosition && isNaN(playheadPt)){
								playheadPt = i;
								if(_prevMaxPtNums[ds.dataURI]) break;
							} 
														
							//determine location
							var dPt:Point = dataToPosition(point);
							
							//skip if position not different different from last plotted point
							if(!selections.isSelected(point) && _prevPos[ds.dataURI]
									&& Math.abs(_prevPos[ds.dataURI].x - dPt.x) < pointOverlapTolerance 
									&& Math.abs(_prevPos[ds.dataURI].y - dPt.y) < pointOverlapTolerance){
								continue;
							}  
							
							//plot the point to the current bitmapdata
							renderer.plotPoint(point,dPt,ds.pollutant,selections.isSelected(point),false,(point.time > playheadPosition));
							_prevPos[ds.dataURI] = dPt;
						}
						_prevMaxPtNums[ds.dataURI] = playheadPt;
					}
					
					plotBitmapData.unlock();
					
					if(dirty.check(DirtyFlag.DIRTY)){
						_bitmap = new Bitmap(plotBitmapData);
						_bitmap.x = -(container.width / 2);
						container.rawChildren.addChild(_bitmap);
					}
				}
				
				//set up and position the labels, scrollBar, and mask
				plotLabels();
				setupMask();
				setupScrollBar();
				
				dirty.clean();
			}
			
			/**
			 * Plots the X and Y axes and gridlines for all 
			 *  of the datasets shown in the timeline.
			 */
			protected function plotAxes(bd:BitmapData,bounds:Rectangle):void{
				var plotShape:Shape = new Shape();
				
				//plot x baseline
				plotShape.graphics.lineStyle(0.5,0x999999);
				plotShape.graphics.moveTo(0,bounds.bottom);
				plotShape.graphics.lineTo(bd.width,bounds.bottom);
				
				var startDate:Date = new Date(xBottom * 1000);
				startDate.setFullYear(startDate.fullYear,startDate.month,startDate.day + 1);
				startDate.setHours(0,0,0,0);
				
				//plot days
				var d:Number = startDate.time / 1000;
				plotShape.graphics.lineStyle(0.5,0x999999,0.5);
				while(d < xTop){
					var dx:Number = (d - xBottom) * bounds.width / 
							(xTop - xBottom) + bounds.width / 2;
					plotShape.graphics.moveTo(dx,bounds.bottom);
					plotShape.graphics.lineTo(dx,bounds.top);
					d += (24 * 3600);
				}
				
				//plot hours
				d = startDate.time / 1000;
				plotShape.graphics.lineStyle(0.5,0x999999,0.2);
				while(d < xTop){
					var dx:Number = (d - xBottom) * bounds.width / 
							(xTop - xBottom) + bounds.width / 2 ;
					plotShape.graphics.moveTo(dx,bounds.bottom);
					plotShape.graphics.lineTo(dx,bounds.top);
					d += 3600;
				}
				
				//draw into bitmap data
				bd.draw(plotShape);				
			}
			
			/**
			 * Manages the labels for each of the different datasets shown in the timeline
			 */
			protected function plotLabels():void{
				//remove unused labels
				for(var dl:Object in _dSetLabels){
					if(_dSetLabels[dl] && (!_dSetBounds[dl] || !_dataSets || _dataSets.length == 0)){
						labels.removeChild(_dSetLabels[dl]);						
						_dSetLabels[dl] = null;	
					}	
				}
				
				//add and update others
				for each(var d:AirQualityDataSet in _dataSets){
					if(!_dSetBounds[d.dataURI]) continue;
					if(!_dSetLabels[d.dataURI]) _dSetLabels[d.dataURI] = new TimelineLabel();
					var l:TimelineLabel = _dSetLabels[d.dataURI];
					if(d.name) l.labelText = d.name;
					l.y = _dSetBounds[d.dataURI].top + margin;
					labels.addChild(l);
					l.onRemoveClick = function(e:MouseEvent):void{
							// a very shoddy way of finding the dataset to remove.
							//  however, just using 'd' doesn't work because of a scoping issue
							for each(var dr:AirQualityDataSet in _dataSets){
								if(dr.name == (e.target.parent as TimelineLabel).labelText){
									if(_dataSets.lastIndexOf(dr) != -1){
										_dataSets.splice(_dataSets.lastIndexOf(dr),1);
										dispatchEvent(new DataSetEvent(DataSetEvent.DATASET_REMOVED,dr));
									}
								}								
							}
						};
				}	
			}

			/**
			 * Setup and place the mask for the bitmap 
			 */ 
			protected function setupMask():void{
				_mask.graphics.clear();
				_mask.graphics.beginFill(0xFFFFFF);
				_mask.graphics.drawRect(-(pointDiameter / 2),-(pointDiameter / 2),
					container.width + pointDiameter, container.height + SCROLLBAR_HEIGHT + pointDiameter);
				_mask.graphics.endFill();
				
				container.rawChildren.addChild(_mask);
				
				if(container.mask != _mask)container.mask = _mask;
			}
			
			
			/**
			 * Set up and place the scroll bar
			 */
			protected function setupScrollBar():void{
				_hScroll.direction = ScrollBarDirection.HORIZONTAL;
				_hScroll.x = -(pointDiameter / 2);
				_hScroll.y = container.height - _hScroll.height + SCROLLBAR_HEIGHT;
				_hScroll.width = container.width + pointDiameter;
				
				var range:Number = xTop - xBottom;
				
				_hScroll.setScrollProperties(range,xMin,xMax-range,range / 10);
				_hScroll.scrollPosition = xBottom;
				
				if(!_hScroll.hasEventListener(ScrollEvent.SCROLL)){
					_hScroll.addEventListener(ScrollEvent.SCROLL, handleScroll);
				}
								
				container.rawChildren.addChild(_hScroll);
			}
			
			//Only redraw periodically during drags
			protected var _scrollTimer:Timer;
			
			
			protected function handleScroll(se:ScrollEvent):void{	
				var range:Number = xTop - xBottom;
				_bitmap.x -= ((se.position - xBottom) * container.width / range);  
				
				xBottom = Math.max(_hScroll.scrollPosition,xMin);
				xTop = Math.min(xBottom + range,xMax);
				
				if(_scrollTimer && _scrollTimer.running){
					_scrollTimer.reset();
					_scrollTimer.start();
				} 
				else{
					_scrollTimer = new Timer(300);
					_scrollTimer.addEventListener(TimerEvent.TIMER,function(e:Event):void{
							_scrollTimer.stop();
							movePlayHead(playhead.x);
							dirty.dirty();
							refresh();
						});
					_scrollTimer.start();
				}
			}
			
			/**
			 * Attempts to center the timeline on the given value
			 *  without changing the zoom level. 
			 */
			public function centerOn(midPoint:Number):void{
				var range:Number = xTop - xBottom;
				if(range < xMax - xMin){
					xBottom = Math.max(xMin,int(midPoint - range / 2));
					xTop = Math.min(xMax,int(midPoint + range / 2));
					movePlayHead(playhead.x);
					dirty.dirty();
					refresh();
				}
			}
			
			/**
			 * Zooms the view in. If no midpoint is specified, the zoom is 
			 *  centered at the middle of the current view.
			 */
			public function zoomIn(midPointVal:Number=Number.POSITIVE_INFINITY):void{
				var zoomRange:Number = (xTop - xBottom) * zoomPercentage;
				var midPoint:Number = midPointVal != Number.POSITIVE_INFINITY ? midPointVal : xBottom + (xTop - xBottom) / 2;
				xBottom = Math.max(xMin,int(midPoint - zoomRange / 2));
				xTop = Math.min(xMax,int(midPoint + zoomRange / 2));
				movePlayHead(playhead.x);
				dirty.dirty();
				refresh();
			}
			
			/**
			 * Zooms the view out.
			 */
			public function zoomOut():void{
				var zoomRange:Number = (xTop - xBottom) / zoomPercentage;
				var midPoint:Number = xBottom + (xTop - xBottom) / 2;
				xBottom = Math.max(xMin,midPoint - zoomRange / 2);
				xTop = Math.min(xMax,midPoint + zoomRange / 2);
				movePlayHead(playhead.x);
				dirty.dirty();
				refresh();
			}
			
			protected function dataToPosition(pointData:Object):Point{
				if(!(_dSetBounds[pointData.sourceURI] is Rectangle)) return null;
				var sBounds:Rectangle = _dSetBounds[pointData.sourceURI];
				
				return new Point((pointData[xDataField] - xBottom) * sBounds.width /
						 	(xTop - xBottom) + sBounds.width / 2,
						 sBounds.height * (1 - (pointData[yDataField] - yMin) /
						 	(yMax - yMin)) + sBounds.y); 
			}
			
			
			//FIXME: Linear search here is probably going to cause performance problems sooner or later
			/*protected function xPosToDataPts(x:Number):Array{
				var overXPos:int = xPosToXVal(x);
				var pts:Array = []
				for each(var ds:AirQualityDataSet in _dataSets){
					for each (var dp:Object in ds.data){
						if(Math.abs(dp[xDataField] - overXPos) < 10){
							pts.push(dp);
						} 
					}					
				}
				return pts; 
			}*/
			
			protected function posToClosestPoint(pos:Point):Object{
				//check which bounds (if any) the point is inside of
				for(var db:String in _dSetBounds){
					if((_dSetBounds[db] as Rectangle).containsPoint(pos)){
						
						//find the dataset for the enclosing bounds
						for each(var d:AirQualityDataSet in _dataSets){
							if(d.dataURI == db){
								//find the value of the cursor position in that space
								var overValue:Point = localToDataSpace(pos,d);
								var r:Number = localToDataSpace(new Point(pointDiameter/2,0),d).x - localToDataSpace(new Point(0,0),d).x;
								
								var pts:Array = [];
								for each(var dx:Object in d.data){
									//FIXME: Need a smarter threshold here. 
									// This will break horribly when zoomed
									if(Math.abs(dx[xDataField] - overValue.x) < r) pts.push(dx);
								}
								//then find the closest of those in y;
								var cpt:Object;
								var cst:Number = Number.POSITIVE_INFINITY;
								for each(var dy:Object in pts){
									if(Math.abs(dy[yDataField] - overValue.y) < cst){
										cpt = dy;
										cst = Math.abs(dy[yDataField] - overValue.y);
									} 
								}
								return cpt;
							}
						}
					}
				}
				return null;
			}
			
			
			protected function xPosToXVal(x:Number):int{
				var position:Number = x;
				return xBottom + Math.floor(position * (xTop - xBottom)/container.width);
			}
			
			protected function localToDataSpace(position:Point,dataSet:AirQualityDataSet):Point{
				var bounds:Rectangle = _dSetBounds[dataSet.dataURI];
				if(!bounds) return null;
				
				var dPos:Point = position.clone();
				
				dPos.x = xBottom + Math.floor(dPos.x * (xTop - xBottom)/bounds.width);
				dPos.y = yMin + Math.floor((bounds.y + bounds.height - dPos.y) * (yMax - yMin)/bounds.height);
				return dPos;
			}
			
			
			/****************************** Tooltipping Methods ************************************/
			protected var _plotTip:ToolTip;
			
			/**
			 * Draws and positions a tooltip for the given datapoint.
			 */
			public function drawDataTip(dataPoint:Object):void{
				
				var ptPosition:Point = dataToPosition(dataPoint);
				if(!ptPosition) return;
				ptPosition = container.localToGlobal(ptPosition);
				if(!_plotTip)_plotTip = ToolTipManager.createToolTip(dataPoint.value,ptPosition.x,ptPosition.y) as ToolTip;
			
				//color the tip and add additional text if possible
				if(dataPoint.value){
					//FIXME: Currently defaulting to pollutant from the first dataset, should be able to support per-track
					var cat:String = AirQualityColors.getAQICategoryForValue(dataSets[0].pollutant,dataPoint.value);
					var color:uint = AirQualityColors.getColorForAQICategory(cat);
					_plotTip.setStyle("backgroundColor",color);
					_plotTip.setStyle("backgroundAlpha",0.7);
					var time:Number = Number(dataPoint.time * 1000);
					var date:Date = new Date(time);
					_plotTip.text = (date + "\n" + 
						dataPoint.value + " (" + cat + ")" +
						((dataPoint.lat == null || dataPoint.lat == "None") ? "\n!NO GPS DATA" : ""));
					var rightInset:Number = Math.max(0, ptPosition.x + _bitmap.x -
						 container.localToGlobal(new Point(container.width - _plotTip.width)).x);
					_plotTip.x = ptPosition.x + _bitmap.x - rightInset;
					_plotTip.y = ptPosition.y;
					
					_plotTip.graphics.clear();
					
					//Overplot nearby points as part of the tooltip
					/*var pn:int = dataToPointNum(dataPoint);
					if(pn != -1){
						for(var pi:int = pn - numMouseOverAdjacents; pi < pn + numMouseOverAdjacents; pi++){
							if(pi < 0 || pi >= data.length) continue;
							var adjPt:Object = data[pi];
							if(adjPt && adjPt.lat != null && adjPt.lat !="None"){
								var aColor:uint = AirQualityColors.getColorForValue(dataSets[0].pollutant,adjPt.value);
								var aPosition:Point = container.localToGlobal(dataToPosition(adjPt));
								_plotTip.graphics.lineStyle(2,0xffffff,0.7);
								_plotTip.graphics.beginFill(aColor,1);
								_plotTip.graphics.drawCircle(aPosition.x - ptPosition.x, aPosition.y - ptPosition.y,pointDiameter - (pointDiameter/2 * Math.abs(pi - pn)/numMouseOverAdjacents));
				    			_plotTip.graphics.endFill();								
							}
						}
					}*/
					
					if(rightInset > 0){
						trace(rightInset);
					}
					PointRenderer.drawPointToGraphics(_plotTip.graphics,dataPoint,new Point(rightInset,0),
						dataSets[0].pollutant,selections.isSelected(dataPoint),true,false,pointDiameter);
					//Plot an accentuated version of the point as part of the tooltip
					/*_plotTip.graphics.lineStyle(2,0xffffff,0.7);
					_plotTip.graphics.beginFill(color,1);
					_plotTip.graphics.drawCircle(rightInset,0,pointDiameter);
	    			_plotTip.graphics.endFill();
	    			_plotTip.graphics.beginFill(0xffffff,1);
	    			_plotTip.graphics.drawCircle(rightInset,0,pointDiameter/2);
	    			_plotTip.graphics.endFill();*/
	    			
				}
				else _plotTip.text = "No Data";
			}	
				
				
			public function discardActiveDataTip():void{
				if(_plotTip){
					ToolTipManager.destroyToolTip(_plotTip);
					_plotTip = null;
					dispatchEvent(new DataPointEvent(DataPointEvent.UNHOVER));
				}
			}
			
			protected function handleMouseClick(me:MouseEvent):void{
				//if we've clicked on some other child (like the scrollbar) do nothing
				if(me.target != container) return;
				
				//calculate the location of the click and locate the nearest matching point
				var overPt:Object = posToClosestPoint(new Point(me.localX,me.localY));
							
				//If we have a point, fire an event
				if(overPt) dispatchEvent(new DataPointEvent(DataPointEvent.CLICK,overPt,new Point(me.stageX,me.stageY)));
			}
			
			
			protected function handleDoubleClick(me:MouseEvent):void{
				//if we've clicked on some other child (like the scrollbar) do nothing
				if(me.target != container) return;
				
				//calculate the location of the click and locate the nearest matching point
				var xVal:int = xPosToXVal(me.localX);
							
				//If we have a point, zoom
				if(xVal > xBottom && xVal < xTop) zoomIn(xVal);
			}
			
			
			protected function handleMouseMove(me:MouseEvent):void{
				
				//if we've moused over some other child (like the scrollbar) do nothing
				if(me.target != container) return;
				
				//calculate the location we're currently mousing over and locate the nearest matching point
				var closestPoint:Object = posToClosestPoint(new Point(me.localX,me.localY));
				if(closestPoint){
					drawDataTip(closestPoint);
					tipLine.x = me.localX + container.x;
					tipLine.visible = true;
					dispatchEvent(new DataPointEvent(DataPointEvent.HOVER,closestPoint,new Point(me.stageX,me.stageY)));
				} 
				//If no point is sufficiently close throw away any tip we might have
				else{
					discardActiveDataTip();
					tipLine.visible = false;
				} 
				
			}
			
			protected function handleMouseOut(me:MouseEvent):void{
				tipLine.visible = false;
				discardActiveDataTip();
			}
			
			
			
			/****************************** Playback Methods ************************************/

			[Bindable]
			protected var _playing:Boolean = false;			
			protected var _playheadDragging:Boolean = false;
			protected var _timer:Timer;
			
			public var framerate:Number = 10; 	//as FPS	
			public var timeMultiplier:Number = 100;
			
			protected function startPlayback(e:Event=null):void{
				//if playhead is maxed out, restart from the beginning.
				if(playhead.x == container.x + container.width){
					movePlayHead(0);
				}
				//set up and run timer to push playhead forward
				_timer = new Timer(1000/framerate);
				_timer.addEventListener(TimerEvent.TIMER,function(te:TimerEvent):void{
						var increment:Number = (_timer.delay * timeMultiplier / 1000);
						var ix:Number = increment * container.width / (xTop - xBottom);
						var px:Number = playhead.x + Math.max(0.1,ix); //make sure it moves some minimum amount!
						movePlayHead(px);
						if(playhead.x == container.x + container.width) stopPlayback();
					});
				_timer.reset();
				_timer.start();
				_playing = true;
			}
			
			protected function stopPlayback(e:Event=null):void{
				if(_timer)_timer.stop();
				_playing = false;
			}
			
			protected function startPlayHeadDrag(e:MouseEvent):void{
				stopPlayback();
				_playheadDragging = true;
				playhead.setStyle("backgroundColor",0x62d000);
			}
			
			protected function stopPlayHeadDrag(e:MouseEvent):void{
				_playheadDragging = false;
				playhead.setStyle("backgroundColor",0xffffff);
			}
			
			protected function playHeadDrag(e:MouseEvent):void{
				if(_playheadDragging){
					movePlayHead(e.localX + container.x)
				}	
			}
			
			protected function movePlayHead(moveToX:Number):void{
				var oldx:Number = playhead.x;
				playhead.x = container.x + Math.max(0,Math.min(container.width,	moveToX - container.x));
				if(playhead.x < oldx) dirty.dirty();
				else dirty.dirty(DirtyFlag.APPEND);
				//if(playhead.x != oldx){
					//Currently we're refreshing while dragging interactively. Performance tweaks
					// are necessary if we're going to make this work with more data.
					dispatchEvent(new TimelineEvent(TimelineEvent.PLAYHEAD_MOVED,xPosToXVal(playhead.x - container.x)));
					refresh();
				//} 
			}
			
			protected function playScrollDataTip(val:Number):String{
				return int(Math.pow(10,val)) + 'x Playback';
			}
			
			/****************************** Helper Methods ************************************/
			
			protected function calculateMinMax():void{
				
				xMin = yMin = xBottom = Number.POSITIVE_INFINITY; 
				xMax = yMax = xTop = Number.NEGATIVE_INFINITY;
				
				for each(var ds:AirQualityDataSet in dataSets){
					//Find mins and maxes
					for each(var o:Object in ds.data){

						var xVal:Number = Number(o[xDataField]);
						if(isNaN(xMin) || xVal < xMin) xMin = xVal;
						if(isNaN(xMax) || xVal > xMax) xMax = xVal;

						var yVal:Number = Number(o[yDataField]);
						if(isNaN(yMin) || yVal < yMin) yMin = yVal;
						if(isNaN(yMax) || yVal > yMax) yMax = yVal;
					}
				}
				xBottom = xMin;
				xTop = xMax;
				dirty.dirty();
			}
		]]>
	</mx:Script>
	
	
</mx:Canvas>
