<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:flex="com.modestmaps.flex.*" xmlns:flexlib="http://code.google.com/p/flexlib/" 
	implements="commentspace.IStatefulVis" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:ns1="components.*"
	xmlns="*"
	backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]">
	
	
	<mx:Canvas id="container" width="100%" height="100%" backgroundColor="0xffffff" 
		horizontalScrollPolicy="off" verticalScrollPolicy="auto" creationComplete="{setup()}"/>
	
	<!--<mx:VDividedBox left="15" top="15" right="15" width="100" height="100%">
		<mx:VBox width="100%">
			<mx:HBox width="100%">
				<mx:Button label="+ load additional data" click="{triggerLoadingPopup()}"  
					height="25"/>
				<mx:Button label="refresh" click="{reloadDataSets()}"  
					toolTip="reloads all loaded datasets a any new data"
					height="25"/>
				<mx:Button label="center map on last point" click="{centermap()}"  
					color="#62D000" fillAlphas="[1.0, 1.0]" fillColors="[#FFFFFF, #E6E6E6]"
					height="25"/>	
			</mx:HBox>
			
		</mx:VBox>
	</mx:VDividedBox>-->
	
	<mx:VBox right="15" top="30" bottom="270" width="0" id="timelinesHolder" 
		backgroundColor="#FFFFFF" backgroundAlpha="0" verticalGap="0"/>
		
	<mx:HBox width="100%">
	<flexlib:WindowShade paddingBottom="15" paddingLeft="15" id="badgeSelector" label="Sensor" width="275" styleName="windowShadeStyle">
		<flexlib:headerRenderer>
			<mx:Component>
				<mx:LinkButton cornerRadius="10" fontSize="15" fontFamily="Verdana" color="#73C400"/>
			</mx:Component>
		</flexlib:headerRenderer>
		<mx:Text text="select a pollutant" fontWeight="normal" fontSize="9" />
		<!--<mx:List dataProvider="{BADGES}" id="badgeIdList" 
			labelField="name" width="230" height="90" allowMultipleSelection="true" />-->
		<mx:List dataProvider="{POLLUTANTS}" id="pollutantList"
			labelField="pollutant" height="90" selectedIndex="0"  width="230" itemClick="{fileBadgeListHandler()}" />
		<mx:Text text="file/badge listing for selected pollutant" fontWeight="normal" fontSize="9" />
		<mx:List dataProvider="{FILES}" id="fileBadgeList" allowMultipleSelection="true"
			labelField="name" height="90" width="230" selectedIndex="0" />
		
		<mx:Button label="refresh/load" click="{selectorHandler()}"  
			toolTip="reloads all loaded datasets or loads any new data"
			height="25"/>
	</flexlib:WindowShade>
	
	<flexlib:WindowShade paddingBottom="15" paddingLeft="15" id="locationSelector" label="Location" 
		x="{badgeSelector.width}" width="250" styleName="windowShadeStyle" opened="false">
		<flexlib:headerRenderer>
			<mx:Component>
				<mx:LinkButton cornerRadius="10" fontSize="15" fontFamily="Verdana" color="#73C400"/>
			</mx:Component>
		</flexlib:headerRenderer>
		<mx:Text text="see data at a location" fontWeight="normal" fontSize="9" />
		<mx:TextInput id="location" text="18th and Telegraph, Oakland, CA"/>
		<mx:Button label="Go" click="{locationHandler()}" />
	</flexlib:WindowShade>
	
	<flexlib:WindowShade paddingBottom="15" paddingLeft="15" id="timeSelector" label="Time" opened="false"
		x="{badgeSelector.width + locationSelector.width}" width="220" styleName="windowShadeStyle">
		<flexlib:headerRenderer>
			<mx:Component>
				<mx:LinkButton cornerRadius="10" fontSize="15" fontFamily="Verdana" color="#73C400"/>
			</mx:Component>
		</flexlib:headerRenderer>
		<mx:Text text="select a time range" fontWeight="normal" fontSize="9" />
		<mx:DateChooser id="dateChooser" borderColor="#FFFFFF" selectedDate="{new Date()}"
			allowMultipleSelection="true" allowDisjointSelection="false" showToday="false" width="180"/>
		<mx:Button label="show these dates" click="{selectorHandler()}" />
		
		<!--<mx:Button label="Show all times" click="{selectorHandler()}" />-->
	</flexlib:WindowShade>
	
	
	<flexlib:WindowShade paddingBottom="15" paddingLeft="15" id="episodesSelector" label="Episodes and Air Quality" 
		x="{badgeSelector.width + locationSelector.width + timeSelector.width}" width="250" styleName="windowShadeStyle" opened="false">
		<flexlib:headerRenderer>
			<mx:Component>
				<mx:LinkButton cornerRadius="10" fontSize="15" fontFamily="Verdana" color="#73C400"/>
			</mx:Component>
		</flexlib:headerRenderer>
		<mx:Text text="select a reading range" fontWeight="normal" fontSize="9" />
		<mx:HSlider id="airQualitySlider" width ="200" thumbCount="2" minimum="0" maximum="1" change="{airQualitySliderHandler()}" />
		<mx:Button label="mark the 10 highest" click="{episodesHandler()}" />
		<mx:Button label="remove episodes view" click="{destroyEpisodes()}" />
		
	</flexlib:WindowShade>
	
	<mx:Button top="5" height="28" cornerRadius="10" x="{badgeSelector.width + locationSelector.width + timeSelector.width + episodesSelector.width}" id="shadeCloser" label="^" click="{closeAllShades()}" />
	</mx:HBox>

	<ns1:AirQualityLegend id="legend" bottom="220" right="15" width="650" height="30"/>
	<mx:ProgressBar id="progressBar" bottom="220" right="{30 + legend.width}" left="125" visible="false" includeInLayout="false" indeterminate="true" mode="manual"/>
	<ns1:AirQualityTimeLine id="timeline" width="100%" height="200" left="15" right="15" bottom="15" creationComplete="{setup()}"/>
	

	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import commentspace.events.EntityEvent;
			import mx.events.CollectionEventKind;
			import mx.events.CollectionEvent;
			import events.TimelineEvent;
			import events.DataSetEvent;
			import data.SelectionSet;
			import data.AirQualityDataSet;
			import __AS3__.vec.Vector;
			import components.DisclaimerPanel;
			import components.InputErrorPanel;
			import events.CSEvent;
			import events.DataPointEvent;
			import mx.managers.PopUpManager;
			import components.loading.DataLoadingPanel;
			import components.AirQualityMapLayer;
			import etc.AirQualityConstants;
			import mx.messaging.AbstractConsumer;
			import mx.effects.Zoom;
			import com.modestmaps.mapproviders.microsoft.MicrosoftHybridMapProvider;
			import com.modestmaps.events.MarkerEvent;
			import com.modestmaps.TweenMap;
			import com.modestmaps.extras.ui.Button;
			import mx.events.ResizeEvent;
			import com.modestmaps.events.MapEvent;
			import commentspace.StatefulVisEvent;
			import com.modestmaps.overlays.MarkerClip;
			import mx.events.MenuEvent;
			import mx.controls.Menu;
			import com.modestmaps.Map;
			import com.modestmaps.extras.ZoomSlider;
			import com.modestmaps.extras.MapControls;
			import flash.sampler.Sample;
			import com.modestmaps.geo.Location;
			import mx.events.FlexEvent;
			import mx.controls.Label;
			
			/******** Embedded Assets **********************************************************/
			[Embed(source="assets/flag_blue.png")]
			protected const BlueFlagIcon:Class;
			[Embed(source="/assets/comment_flag.png")]
			protected const CommentIcon:Class;
			[Embed(source="assets/cross.png")]
			protected const CancelIcon:Class;
			
			
			
			/******** Constants **********************************************************/
			protected const CLICK_RADIUS:Number = 2;
			
			protected static const DESATURATION_MATRIX:Array = [
					0.3, 0.59, 0.3, 0, 0,
		            0.3, 0.59, 0.3, 0, 0,
		            0.3, 0.59, 0.3, 0, 0,
		            0, 0, 0, 0.5, 0
		        ];
		    
		    // Adding Google API key to enable geocoding (note security restriction stuff associated with this)... 
		    public static const GOOGLE_API_KEY:String = "ABQIAAAA_3td1tmQ7cbEqh_kQLucMRRl_cuzxjTWTH-RUAWem_qXsJGROBTgOLdo3jwgLuyWZ63_ndi7h3-PQg";
		    
			protected const BADGES:Array = [
				{name:"Badge 1",id:'000000000001'},
				{name:"Badge 2",id:'000000000002'},
				{name:"Badge 3",id:'000000000003'},
				{name:"Badge 4",id:'000000000004'},
				{name:"Badge 5",id:'000000000005'},
				{name:"Badge 6",id:'000000000006'},
				{name:"Badge 7",id:'000000000007'},
				{name:"Badge 8",id:'000000000008'},
				{name:"Badge 9",id:'000000000009'},
				{name:"Badge 10",id:'00000000000A'},
				{name:"Badge 11",id:'00000000000B'},
				{name:"Badge 12",id:'00000000000C'},
				{name:"Badge 13",id:'00000000000D'},
				{name:"Badge 14",id:'00000000000E'},
				{name:"Badge 15",id:'00000000000F'},
				{name:"Badge 16",id:'000000000010'},
				{name:"Badge 17",id:'000000000011'},
				{name:"Badge 18",id:'000000000012'},
				{name:"Badge 19",id:'000000000013'},
				{name:"Badge 20",id:'000000000014'},
				{name:"Badge 21",id:'000000000015'},
				{name:"Badge 22",id:'000000000016'}];
				
			protected const POLLUTANTS:Array = [
				{pollutant:"Carbon Monoxide (8-hour thresholds)",abbreviation:"co",db:'mco',multiplier:0.001},
				{pollutant:"Particulate Matter 2.5 (24-hour thresholds)",abbreviation:"pm25",db:"pm25",multiplier:1000},
				{pollutant:"Particulate Matter 10 (24-hour thresholds)",abbreviation:"pm10",db:"pm10",multiplier:1000}
				//{pollutant:"Ozone (1-hour thresholds)",abbreviation:"ozone8",db:'so3',multiplier:0.001},
				//{pollutant:"Ozone (8-hour thresholds)",abbreviation:"ozone1",db:'o3',multiplier:0.001},
				//{pollutant:"Sulfur Dioxide (24-hour thresholds)",abbreviation:"so2",db:'so2',multiplier:0.001}
				];
			
			protected var FILES:Array = [];
				
			public static const BASE_DB_QUERY_URL:String = "http://www.commonsensecommunity.com/badgedata/"; 	//production server
			//public static const BASE_DB_QUERY_URL:String = "http://12.46.129.13:8080/badgedata/"; 				//development server
			public static const PM_DATA_DIR:String = "http://www.commonsensecommunity.com/data/WestOaklandPM";
			//public static const PM_DATA_DIR:String = "http://www.eecs.berkeley.edu/~willettw/temp/WestOaklandPM/";
		
			
			/******** Local Vars **********************************************************/
			protected var maxPoints:int = 1000;
			
			//the map!
			protected var map:TweenMap;
			
			//Clip the flags are drawn into
			protected var _flagsClip:MarkerClip;
			
			//Clip the textures are drawn into
			protected var _plotLayer:AirQualityMapLayer;
			
			//The backing data sets for the visualization
			protected var _dataSets:Vector.<AirQualityDataSet> = new Vector.<AirQualityDataSet>();
			
			//An object containing a list of selections 
			protected var _selections:SelectionSet = new SelectionSet();
			
			//flag to prevent updated events from being dispatched during panAndZoomTo runs
			protected var _isPanningAndZooming:Boolean = false; 
			
			protected var firstLoad:Boolean = false;
			protected function setup():void{
				if(!firstLoad) firstLoad = true;
				else{
					setupMap();
					setupTimeline();
				}
			}
			
			protected var _timelines:Array = [];
			
			/******** Mapping Methods **********************************************************/
			protected function setupMap():void{
				
				map = new TweenMap();
				map.setMapProvider(new MicrosoftHybridMapProvider(10,19));
				map.grid.filters = [new ColorMatrixFilter(DESATURATION_MATRIX)];
				container.rawChildren.addChild(map);
				
				map.x = 0;
				map.y = 0;
				map.setSize(container.width,container.height);
				
				map.panDuration = 0.6;
				map.zoomDuration = 0.5;
				map.panAndZoomDuration = 0.6;
				map.useHandCursor = map.buttonMode = true;
				
				_plotLayer = new AirQualityMapLayer(map);
				_plotLayer.dataSets = _dataSets;
				_plotLayer.selections = _selections;
				
				map.addChild(_plotLayer);
				
				var controls:MapControls = new MapControls(map);
				map.addChild(controls);
				//controls.x = 0;
				controls.y = -timeline.height - 15;

				//set the map center
				map.setCenterZoom(new Location(37.803,-122.298),14);
				
				//Listeners for updating state 
				map.addEventListener(MapEvent.STOP_PANNING, dispatchUpdated);
				map.addEventListener(MapEvent.STOP_ZOOMING, dispatchUpdated);
				map.addEventListener(CSEvent.PAN_AND_ZOOM_COMPLETE, dispatchUpdated);
				
				this.addEventListener(ResizeEvent.RESIZE,onResize);
				
				//Listener for zoom and pan
				map.addEventListener(MouseEvent.DOUBLE_CLICK,function(me:MouseEvent):void{
						var location:Location = map.pointLocation(map.globalToLocal(new Point(me.stageX,me.stageY)),map);
						panAndZoomTo(location,map.getZoom() + 1);
					});
				
				//A function for loading a default set of data		
				//TODO: make this cleaner
				var runOnStartup:Function = function():void{
					var request:URLRequest = new URLRequest(DataLoadingPanel.DATA_INDEX_XML_URL);
					var loader:URLLoader = new URLLoader(request);
					
					loader.addEventListener(Event.COMPLETE,function(e:Event):void{
							var indexString:String = loader.data;
							indexString = indexString.replace(/BASE_DB_QUERY_URL/gi,DataLoadingPanel.BASE_DB_QUERY_URL);
							indexString = indexString.replace('24HOURSAGO',int((new Date().time) / 1000 - 24 * 3600));
							indexString = indexString.replace('1WEEKAGO',int((new Date().time) / 1000 - 7 * 24 * 3600));
							var indexArray:Array = JSON.decode(indexString).defaults as Array;
							
							if(indexArray && indexArray.length > 0){
								var loading:int = indexArray.length;
								for each(var def:Object in indexArray){
									loadData(def.url,def.reading,def.name,function():void{ 
										loading--;
										if(loading == 0)dispatchComplete(); 
									});	
								}	
							}
						});
					};	
					
				var quickStartup:Function = function ():void{
					var quickdata:Object = {"name":"All Badges Carbon Monoxide (past 3 hours)",
						"url":DataLoadingPanel.BASE_DB_QUERY_URL +"?reading=mco&start_time=" + int((new Date().time) / 1000 - 3 * 3600),
						"reading":"co"};
					loadData(quickdata.url,quickdata.reading,quickdata.name,function():void{centermap();dispatchComplete();});
				}
				
				
				/*A set of different options for what to do on startup. 1-4 are helpful when debugging*/
					
				//0.Production startup. Requires a click-through disclaimer before using the site	
				//triggerDisclaimerPopup(runOnStartup);
				
				//1.Alternative startup. Jump straight into a load
				//runOnStartup();
				
				//2.Alternative startup, loads a small test dataset
				//quickStartup();
					
				//3.Alternative startup, just pops up the loader
				//triggerLoadingPopup();
				
				//4. Do nothing. Just let commentspace know we're loaded
				dispatchComplete();	
					
			}
			
			protected function setupTimeline():void{

				timeline.dataSets = _dataSets;
				timeline.selections = _selections;
				
				//Add handlers for linked tooltipping between map and timeline
				var drawMapTip:Function = function(de:DataPointEvent=null):void{
						_plotLayer.drawDataTip(de.dataPoint);
					};
				var drawTimelineTip:Function = function(de:DataPointEvent=null):void{
						timeline.drawDataTip(de.dataPoint);
					};
				var discardMapTip:Function = function(de:DataPointEvent=null):void{
						_plotLayer.discardActiveDataTip();
					};
				var discardTimelineTip:Function = function(de:DataPointEvent=null):void{
						timeline.discardActiveDataTip();
					};
				timeline.addEventListener(DataPointEvent.HOVER,drawMapTip);
				timeline.addEventListener(DataPointEvent.UNHOVER,discardMapTip);
				_plotLayer.addEventListener(DataPointEvent.HOVER,drawTimelineTip);
				_plotLayer.addEventListener(DataPointEvent.UNHOVER,discardTimelineTip);
				
				//handlers for popup menus on map and timeline
				timeline.addEventListener(DataPointEvent.CLICK,function(de:DataPointEvent):void{
						discardTimelineTip();	
						createMenu(de.mousePosition,de.dataPoint);
						
					});
				_plotLayer.addEventListener(DataPointEvent.CLICK,function(de:DataPointEvent):void{
						discardMapTip();
						createMenu(de.mousePosition,de.dataPoint);
					});
				
				//handlers for dataset removal and hide/unhide
				var handleRemove:Function = function(de:DataSetEvent):void{			
						_plotLayer.refresh(true);
						timeline.refresh(true);
						dispatchUpdated();
					};
				var handleHide:Function = function(de:DataSetEvent):void{			
						timeline.refresh(true);
						_plotLayer.refresh(true);
						dispatchUpdated();
					};
				timeline.addEventListener(DataSetEvent.DATASET_REMOVED, handleRemove);
				timeline.addEventListener(DataSetEvent.DATASET_HIDDEN, handleHide);
				timeline.addEventListener(DataSetEvent.DATASET_UNHIDDEN, handleHide);
					
				//time scrubbing for map
				timeline.addEventListener(TimelineEvent.PLAYHEAD_MOVED,function(te:TimelineEvent):void{
						if(te.playheadTime){
							_plotLayer.maxTime = te.playheadTime;
							_plotLayer.refresh();
						} 
					});
				
				//Listener for updating map min and max times on the map when timeline zooms and pans
				var timelineMoveHandler:Function = function(te:TimelineEvent):void{
						if(!isNaN(timeline.xTop)) _plotLayer.maxTime = timeline.xTop;
						if(!isNaN(timeline.xBottom)) _plotLayer.minTime = timeline.xBottom;
						_plotLayer.refresh();
						dispatchUpdated();
					};
				timeline.addEventListener(TimelineEvent.TIMELINE_ZOOMED,timelineMoveHandler);
				timeline.addEventListener(TimelineEvent.TIMELINE_SCROLLING,timelineMoveHandler);
				timeline.addEventListener(TimelineEvent.TIMELINE_SCROLLED,timelineMoveHandler);
				
				//Update state whenever the timeline stops (do not try to update during playback)
				timeline.addEventListener(TimelineEvent.PLAYHEAD_STOPPED,dispatchUpdated);
			}
			
			/**
			 * New method for closing all shades when necessary
			 */
			protected function closeAllShades():void{
				badgeSelector.opened = false;
				locationSelector.opened = false;
				timeSelector.opened = false;
				episodesSelector.opened = false;
			}
			
			/**
			 * New method for setting up episodes mini-timelines
			 */
			protected function setupEpisodesTimeline(eTimeline:AirQualityTimeLine):void{

				eTimeline.selections = _selections;
				
				//Add handlers for linked tooltipping between map and timeline
				var drawMapTip:Function = function(de:DataPointEvent=null):void{
						_plotLayer.drawDataTip(de.dataPoint);
					};
				var drawTimelineTip:Function = function(de:DataPointEvent=null):void{
						timeline.drawDataTip(de.dataPoint);
					};
				var drawETimelineTip:Function = function(de:DataPointEvent=null):void{
						eTimeline.drawDataTip(de.dataPoint);
					};
				var discardMapTip:Function = function(de:DataPointEvent=null):void{
						_plotLayer.discardActiveDataTip();
					};
				var discardTimelineTip:Function = function(de:DataPointEvent=null):void{
						timeline.discardActiveDataTip();
					};
				var discardETimelineTip:Function = function(de:DataPointEvent=null):void{
						eTimeline.discardActiveDataTip();
					};
				eTimeline.addEventListener(DataPointEvent.HOVER,drawMapTip);
				eTimeline.addEventListener(DataPointEvent.HOVER,drawTimelineTip);
				eTimeline.addEventListener(DataPointEvent.UNHOVER,discardMapTip);
				eTimeline.addEventListener(DataPointEvent.UNHOVER,discardTimelineTip);
				_plotLayer.addEventListener(DataPointEvent.HOVER,drawETimelineTip);
				_plotLayer.addEventListener(DataPointEvent.UNHOVER,discardETimelineTip);
				
				//handlers for popup menus on map and timeline
				eTimeline.addEventListener(DataPointEvent.CLICK,function(de:DataPointEvent):void{
						discardETimelineTip();	
						createMenu(de.mousePosition,de.dataPoint);
						
					});
				_plotLayer.addEventListener(DataPointEvent.CLICK,function(de:DataPointEvent):void{
						discardMapTip();
						createMenu(de.mousePosition,de.dataPoint);
					});
				
				//handler for dataset removal
				eTimeline.addEventListener(DataSetEvent.DATASET_REMOVED,function(de:DataSetEvent):void{			
						_plotLayer.refresh(true);
						eTimeline.refresh(true);
						dispatchUpdated();
					});
					
				//time scrubbing for map
				eTimeline.addEventListener(TimelineEvent.PLAYHEAD_MOVED,function(te:TimelineEvent):void{
						if(te.playheadTime){
							_plotLayer.maxTime = te.playheadTime;
							
							//Centers map on the last point
							//FIXME: This is a VERY quick implementation that loops through all the points every time.
							// optimize the search for the last point(e.g. only check since the last update) and 
							// smooth the playback	
							if(_dataSets[0] && (_dataSets[0] as AirQualityDataSet).data){
								var ds:AirQualityDataSet = (_dataSets[0] as AirQualityDataSet);
								
								//iterate through points
								for(var i:int=0; i < ds.data.length; i++){
									var point:Object = ds.data[i]; 
									//Save the index of the last point drawn at/after the playhead 							
									if(Number(point.time) > te.playheadTime && point.lat && point.lat != "None" && point.lat !=0){
										//panAndZoomTo(new Location(point.lat, point.lon),map.getZoom());
										map.setCenterZoom(new Location(Number(point.lat),Number(point.lon)),17);
										break;
									}
								}
							}
							_plotLayer.refresh();
						} 
					});
				
				//Listeners for updating state on zoom and pan
				eTimeline.addEventListener(TimelineEvent.TIMELINE_ZOOMED,dispatchUpdated);
				eTimeline.addEventListener(TimelineEvent.TIMELINE_SCROLLED,dispatchUpdated);
				
				//Update state whenever the timeline stops (do not try to update during playback)
				eTimeline.addEventListener(TimelineEvent.PLAYHEAD_STOPPED,dispatchUpdated);
			}
			
			
			/**
			 * Loads data from a source and passes it to the timeline and map when complete.
			 *  Manages the progress bar while loading. 
			 */
			protected function loadData(source:Object,reading:String,name:String=null,onComplete:Function=null):void{
				//if this same source has already been loaded, remove it before reloading.
				for each(var d:AirQualityDataSet in _dataSets){
					if(d.dataURI == source) _dataSets.splice(_dataSets.lastIndexOf(d),1);
				}
				
				progressBar.visible = true;
				progressBar.includeInLayout = true;
				progressBar.minimum = 0;
				progressBar.setProgress(0,1);
				
				var handleProgress:Function = function(pe:ProgressEvent):void{
					progressBar.setProgress(pe.bytesLoaded,pe.bytesTotal);
					progressBar.label = (int(pe.bytesLoaded / pe.bytesTotal * 100) + 
						"% (" + pe.bytesLoaded + " of " + pe.bytesTotal + " bytes)");
				}
				
				//FIXME: Multipliers should be handled in a more intelligent way, probably provided by the resource 
				// providing the source data, since it can change from source to source even for the same reading type.
				// For now, we just assume PM data needs to be scaled up.
				var multiplier:Number = (reading == AirQualityConstants.PM_25_24HR || 
					reading == AirQualityConstants.PM_10_24HR) ? 1000 : 1; 
				
				var ds:AirQualityDataSet = new AirQualityDataSet(source,reading,name, multiplier) 
				ds.addEventListener(ProgressEvent.PROGRESS, handleProgress);
				ds.addEventListener(Event.COMPLETE, function(e:Event):void{
						progressBar.visible = false;
						progressBar.setProgress(0,1);
						progressBar.includeInLayout = false;
						_dataSets.push(ds);
						timeline.refresh(true);
						_plotLayer.refresh(true);
						dispatchUpdated();
						
						// We can set up the airQualitySlider again here
						airQualitySlider.minimum = timeline.yMin;
						airQualitySlider.maximum = timeline.yMax;
						airQualitySlider.setThumbValueAt(0, airQualitySlider.minimum);
						airQualitySlider.setThumbValueAt(1, airQualitySlider.maximum);
						
						if(onComplete != null){
							onComplete();
						} 
				});
			}
			
			
			/**
			 * Forces all of the loaded datasets to reload from scratch.
			 */
			protected function reloadDataSets():void{
				var oldDataSets:Vector.<AirQualityDataSet> = new Vector.<AirQualityDataSet>();
				while(_dataSets.length > 0) oldDataSets.push(_dataSets.pop());
				for each(var d:AirQualityDataSet in oldDataSets){
					loadData(d.dataURI,d.pollutant,d.name);					
				}
			}
			
			
			/** Pops up a menu that allows markers to be
			 *   added to the display.
			 */
			protected function createMenu(mousePt:Point,dataPoint:Object):void{
				
				
				//Short-term solution, always center on point click, bypassing the menu
				if(dataPoint.lat && dataPoint.lat != "None") panAndZoomTo(new Location(dataPoint.lat, dataPoint.lon),map.getZoom());
				if(dataPoint.time) timeline.centerOn(dataPoint.time);
				
				
				/* TODO: Bring all of this code back once commenting is avaliable. 
				//set up menu XML
				var menuXML:XML = XML(<root/>);
				var centerXML:XML = XML(<item/>);
				centerXML.@label = 'Center Views on This Point';	
				centerXML.@event = 'center';
				menuXML.appendChild(centerXML);
				
				//TODO:Enable Commenting functionality.
				if(_selections.isSelected(dataPoint)){
					var viewXML:XML = XML(<item/>);
					viewXML.@label = 'View Comments for this Data Point';	
					viewXML.@icon = 'CommentIcon';
					viewXML.@event = 'view';
					menuXML.appendChild(viewXML);
				}
				else{
					var addXML:XML = XML(<item/>);
					addXML.@label = 'Comment on this data point';	
					addXML.@icon = 'CommentIcon';
					addXML.@event = 'add';
					menuXML.appendChild(addXML);
				}
				
				var cancelXML:XML = XML(<item/>);
				cancelXML.@label = 'Cancel';
				cancelXML.@icon = 'CancelIcon';
				cancelXML.@event = 'cancel';
				menuXML.appendChild(cancelXML);

				//build and display menu
				var menu:Menu = Menu.createMenu(map,menuXML,false);
				menu.labelField = "@label";
				menu.iconFunction = iconFunction;
				menu.addEventListener(MenuEvent.ITEM_CLICK,function(me:MenuEvent):void{
						//When Add is clicked - add selection
						if(me.item.@event == 'add'){
							var s:Object = _selections.addSelection(dataPoint.id);
							_plotLayer.refresh(true);
							timeline.refresh(true);
						}
						//When Center is clicked - center both views on point
						else if(me.item.@event == 'center'){
							if(dataPoint.lat && dataPoint.lat != "None") panAndZoomTo(new Location(dataPoint.lat, dataPoint.lon),map.getZoom());
							if(dataPoint.time) timeline.centerOn(dataPoint.time);
						}
						//When view is clicked, focus that selection
						else if(me.item.@event == 'view'){
							var dSel:Array = _selections.getSelections(dataPoint);
							if(dSel && dSel.length > 0) dispatchEvent(new EntityEvent(EntityEvent.ENTITY_FOCUSED,dSel[0]));
							
						}
						//otherwise, hide the menu
						else menu.hide();
					});
					
	            menu.show(mousePt.x, mousePt.y);*/
			}
			
			/**
			 * Pans and zooms to a specific point and zoom level.
			 *  If this takes longer than expected, cut to the chase and just jump 
			 *  to the specified loc/zoom - this circumvents a bug where modest maps
			 *  can hang indefinitely when panning.
			 */
			protected function panAndZoomTo(loc:Location,zoom:int):void{
				
				if(_isPanningAndZooming) return; //don't try to run if one is underway
				_isPanningAndZooming = true;
				var mapZoom:int = map.getZoom();
				
				//We'll skip to the point if the pan takes 50% longer than expected. 
				var t:Timer = new Timer(1000 * map.panDuration * 1.5);
				
				//If panning completes successfully, then zoom
				var onPZPan:Function = function(me:MapEvent):void{
						map.removeEventListener(MapEvent.STOP_PANNING,onPZPan);
						map.zoomByAbout(zoom - mapZoom);
					}
				
				//If zooming completes or the timer expires, do a final recenter and dispatch events
				var onPZComplete:Function = function(e:Event=null):void{
						
						//Remove listeners
						t.stop();
						t.removeEventListener(TimerEvent.TIMER,onPZComplete);
						map.removeEventListener(MapEvent.STOP_PANNING,onPZPan);
						map.removeEventListener(MapEvent.STOP_ZOOMING,onPZComplete);
						
						
						var newCenter:Location = map.getCenter();
						var newZoom:Number = map.getZoom();
						
						//Recenter if our zooming misaligns the result of the pan
						if(!locEquals(loc,newCenter)){
							map.setCenter(loc);
						} 
						if(newZoom != zoom){
							 map.setZoom(zoom);	
						}
						
						if(!locEquals(loc,newCenter) || map.getZoom() != zoom){
							newCenter = map.getCenter(); newZoom = map.getZoom();
							trace("Error: Center and Zoom still are not correct after realign!");
						}
						
						_isPanningAndZooming = false;
						map.dispatchEvent(new CSEvent(CSEvent.PAN_AND_ZOOM_COMPLETE));
					}				
							
				//Add Listeners
				map.addEventListener(MapEvent.STOP_PANNING, onPZPan);
				map.addEventListener(MapEvent.STOP_ZOOMING, onPZComplete);
				t.addEventListener(TimerEvent.TIMER, onPZComplete);
								
				//Start the panning an timer
				t.start();
				map.panTo(loc);
			}
			
			/**
			 * Center the map (currently on the last plotted data point)
			 */
			protected function centermap():void{
				var last:Object;
				for each(var d:AirQualityDataSet in _dataSets){
					if(d.hidden) continue;
					for(var di:int=0; di < d.data.length; di++){
						var dl:Object = d.data[di];
						if((!last || last.time < dl.time) && dl.lat && dl.lon && dl.lat!="None") last = dl;
						if(_plotLayer.maxTime > 0 && dl.time >= _plotLayer.maxTime) break;
					}	
				}
				if(last) panAndZoomTo(new Location(last.lat,last.lon), map.getZoom());
			}
			
			
			/******** Implements IStatefulVis *************************************************/	
				
			protected var _setStateReady:Boolean = false;	
			public function get setStateReady():Boolean{ return _setStateReady; }
				
			
			public function get state():Object{
				var cz:Array = map.getCenterZoom();
				var cl:Location = roundLocation(cz[0] as Location);
				var ds:String;	//dataset uris
				var dsn:String;	//dataset names
				var dsp:String;	//dataset pollutants
				var dsh:String;	//dataset hidden status
				var dsorted:Array = [];
				for each(var d:AirQualityDataSet in _dataSets) dsorted.push(d);
				dsorted.sortOn("dataURI"); 
				for each(var di:AirQualityDataSet in dsorted){
					ds = (ds == null ? di.dataURI : ds + "," + di.dataURI);
					dsn = (dsn == null ? escape(di.name) : dsn + "," + escape(di.name));
					dsp = (dsp == null ? escape(di.pollutant) : dsp + "," + escape(di.pollutant));
					dsh = (dsh == null ? di.hidden.toString() : dsh + "," + di.hidden.toString());
				} 
				return {centerLat:cl.lat,
						centerLon:cl.lon,
						zoom:cz[1],
						dataSource:ds,
						dataNames:dsn,
						dataPollutants:dsp,
						dataHidden:dsh,
						xBottom:timeline.xBottom,
						xTop:timeline.xTop,
						playheadPosition:timeline.playheadPosition,
						airQualitySliderMin:airQualitySlider.values[0],
						airQualitySliderMax:airQualitySlider.values[1]};
			}
			
			public function set state(o:Object):void{
				// Reset all value limiters on the timeline and map to prevent weird issues with the slider
				timeline.clearLimits();
				_plotLayer.clearLimits();
				
				//parameters to be set once we know the data's loaded
				var onceLoaded:Function = function():void{
						//pan and zoom appropriately
						panAndZoomTo(new Location(o.centerLat,o.centerLon),o.zoom);
						
						//set hidden/visibile for each dataset
						for each(var hds:AirQualityDataSet in _dataSets){
							if(dsn.indexOf(hds.name) != -1)
								hds.hidden = Boolean(dsh[dsn.indexOf(hds.name)]);
						}
						
						//set time bounds
						timeline.xBottom = o.xBottom;
						timeline.xTop = o.xTop;
						timeline.playheadPosition = o.playheadPosition;
						timeline.refresh();
						
						// Set airQualitySlider positions now that we have loaded the data
						airQualitySlider.setThumbValueAt(0, o.airQualitySliderMin);
						airQualitySlider.setThumbValueAt(1, o.airQualitySliderMax);
						airQualitySliderHandler();
					};

				//get names, uris, pollutants, and hidden status of datasets in state
				var ds:Array = (o.dataSource is String) ? (o.dataSource as String).split(',') : null;
				var dsn:Array = (o.dataNames is String) ? (o.dataNames as String).split(',') : null;
				var dsp:Array = (o.dataPollutants is String) ? (o.dataPollutants as String).split(',') : null;
				var dsh:Array = (o.dataHidden is String) ? (o.dataHidden as String).split(',') : null;
				
				var loadingCount:int = 0;
				
				//pull old datasets
				var oldDataSets:Vector.<AirQualityDataSet> = new Vector.<AirQualityDataSet>();
				while(_dataSets.length > 0) oldDataSets.push(_dataSets.pop());
				
				//loook for specified datasets via URI
				if(ds){
					for(var i:int=0;i<ds.length;i++){
						var dsi:String = ds[i];
						//if we have an old dataset that matches, keep it
						var match:Boolean = false;
						for each(var ods:AirQualityDataSet in oldDataSets){
							if(ods.dataURI == dsi){
								match = true;
								_dataSets.push(ods);
								break;
							}
						}
						//otherwise, load from outside
						if(!match){
							loadingCount++; 
							loadData(dsi,unescape(dsp[i]),unescape(dsn[i]),function():void{
									loadingCount--;
									if(loadingCount == 0)onceLoaded();
								});
						}
					}					
				}
				if(loadingCount == 0)onceLoaded();
			}
			
			protected function dispatchComplete(e:Event = null):void{
				_setStateReady = true;
				dispatchEvent(new StatefulVisEvent(StatefulVisEvent.VIS_CREATION_COMPLETE,true));
			}
			
			protected function dispatchUpdated(e:Event = null):void{
				if(_isPanningAndZooming) return; //don't dispatch during the middle of a panAndZoom() run
				dispatchEvent(new StatefulVisEvent(StatefulVisEvent.VIS_UPDATE,true));
			}
			
			public function getThumbnail():BitmapData{ // needed for new version of commentspace...
				return null;
			}
			
			/* Security settings - should be constrained before deployment!
			 *  These settings allow this code to be loaded into and accessed by 
			 *  a Flash movie on ANY external server. *****************************/
			Security.allowDomain("*");
			Security.allowInsecureDomain("*");
			
			
			/******** Helper Methods **********************************************************/
				
			public function onResize(event:Event):void
			{	
				var mc:Location = map.getCenter(); 
				map.setSize(this.width, this.height);
				map.setCenter(mc);
				
			}	
			
			/**Checks if two locations are equal to some level of precision */
			protected function locEquals(a:Location,b:Location,precision:uint=10):Boolean{
				return (a.lat.toPrecision(precision) == b.lat.toPrecision(precision) 
					&& a.lon.toPrecision(precision) == b.lon.toPrecision(precision));
			}
			
			/**Returns a location with lat/lon rounded to some level of precision */
			protected function roundLocation(l:Location,precision:uint=10):Location{
				return new Location(Number(l.lat.toPrecision(precision)),Number(l.lon.toPrecision(precision)));
			}
				
				
			/**
			 * A workaround which sets icons in the menus using a 
			 *  function since the standard @icon attribute in the
			 *  XML doesn't work unless the imports are at the application
			 *  root. 
			 * @param o
			 * @return 
			 * 
			 */		
			protected function iconFunction(o:Object):Class{
				if((o as XML).attributes().icon){
					var iconName:String = o.@icon;
					if(!iconName || iconName == "") return null;
					var iconClass:Class = this[iconName] as Class;
					return iconClass;				
				}
				else return null;
			}
			
			
			
			/**
			 * Triggers a disclaimer popup.
			 */
			protected function triggerDisclaimerPopup(onOkay:Function=null):void{
				var disclaimer:DisclaimerPanel = new DisclaimerPanel();
				disclaimer.onOkay = function():void{
						if(onOkay != null) onOkay();
						PopUpManager.removePopUp(disclaimer);
					};
				PopUpManager.addPopUp(disclaimer,this,true);
				PopUpManager.centerPopUp(disclaimer);
			}
			
			protected function triggerInputErrorPopup(onOkay:Function=null):void{
				var errorPanel:InputErrorPanel = new InputErrorPanel();
				errorPanel.onOkay = function():void{
						if(onOkay != null) onOkay();
						PopUpManager.removePopUp(errorPanel);
					};
				PopUpManager.addPopUp(errorPanel,this,true);
				PopUpManager.centerPopUp(errorPanel);
			}
			
			/**
			 * Triggers a popup display that allows data to be loaded from
			 *  outside.
			 */
			protected function triggerLoadingPopup():void{
				var dataPanel:DataLoadingPanel = new DataLoadingPanel();
				
				//when the okay button is clicked
				dataPanel.onLoadClick = function(e:Event=null):void{
						// added map and timeline as arguments so we can get dimensions etc.
						var info:Array = dataPanel.getSelectedInfo(map, timeline);
						if(info && info.length > 0){
							
							//clear the existing plots
							for(var ds:String in _dataSets) delete _dataSets[ds];
							_plotLayer.refresh(true);
							timeline.refresh(true);
							/*
							erroneous loading logic
							var pollutant:String = info[0].reading;
							for each (var i:Object in info) loadData(i.url,pollutant,i.name);
							*/
							trace(info[0].source);
							for each (var i:Object in info) loadData(i.source,i.reading,i.name);
						} 
						PopUpManager.removePopUp(dataPanel);
					};
					//when the cancel button is clicked
					//when the okay button is clicked
				dataPanel.onCancelClick = function(e:Event=null):void{
						PopUpManager.removePopUp(dataPanel);
					};
				PopUpManager.addPopUp(dataPanel,this,true);
				PopUpManager.centerPopUp(dataPanel);
			}
			
			/**
			 * Handles changes in the selection criteria for the various selector menus
			 */
			 
			protected function fileBadgeListHandler():void{
				if(pollutantList.selectedItem.abbreviation == "co"){
					fileBadgeList.dataProvider = BADGES;
				}
				else if(pollutantList.selectedItem.abbreviation == "pm25" || pollutantList.selectedItem.abbreviation == "pm10"){
					FILES = []; // delete the list
					fileBadgeList.dataProvider = FILES;
					
					var pmRootDir:String;
					if(pollutantList.selectedItem.abbreviation == "pm25"){
						pmRootDir = PM_DATA_DIR + "25/"
					} else if(pollutantList.selectedItem.abbreviation == "pm10"){
						pmRootDir = PM_DATA_DIR + "10/"
					}
					var dirRequest:URLRequest = new URLRequest(pmRootDir);
					var dirLoader:URLLoader = new URLLoader(dirRequest);
					
					dirLoader.addEventListener(Event.COMPLETE, function(e:Event):void{
							var pmSourceFiles:Array = (dirLoader.data as String).match(/(?<=href=\").+csv(?=\">)/gi);
							for(var i:int=0; i< pmSourceFiles.length; i++) {
								// TODO - populate an additional list in the Badge menu
								FILES.push({name:pmSourceFiles[i], path:pmRootDir + pmSourceFiles[i]});
							}
							fileBadgeList.dataProvider = FILES;
					});
				}
			}
			
			protected function selectorHandler():void{
				// Reset all value limiters on the timeline and map to prevent weird issues with the slider
				timeline.clearLimits();
				_plotLayer.clearLimits();
				
				//clear the existing plots... (why do we do this?)
				for(var ds:String in _dataSets) delete _dataSets[ds];
				_plotLayer.refresh(true);
				timeline.refresh(true);
				
				// TODO will eventually integrate pm data so its from a badge, just like co data...
				if(pollutantList.selectedItem.abbreviation == "pm25" || pollutantList.selectedItem.abbreviation == "pm10"){
					
					// If we already have the file list... take the selected ones and load them up
					if(FILES.length > 0){
						for each(var file:Object in fileBadgeList.selectedItems){
							loadData(file.path, pollutantList.selectedItem.abbreviation,
								file.name, function():void{centermap();dispatchComplete();});
						}
					} else{
						trace("file list not populated, cannot load anything from it.");
					}
				}
				else{
					var info:Array = []
					if(fileBadgeList.selectedItems.length > 0 && pollutantList.selectedItems.length > 0){
						for each(var b:Object in fileBadgeList.selectedItems){
						info.push({name:buildName(b.name),
								   source:buildURL(map, timeline, b.id),
								   reading:pollutantList.selectedItem.abbreviation});
						}
						// alright, we're ready to load everything for each badge!
						trace(info[0].source);
						for each (var i:Object in info) loadData(i.source,i.reading,i.name);
					} else{
						triggerInputErrorPopup();
					}
				}
			}
			
			protected function locationHandler():void{
				// Set center on map first so window metadata is correct for final backend query
				var request:URLRequest = new URLRequest("http://maps.google.com/maps/geo?q=" + location.text + "&output=csv&oe=utf8&sensor=false&key=" + GOOGLE_API_KEY);
				trace("Query to google: " + "http://maps.google.com/maps/geo?q=" + location.text + "&output=csv&oe=utf8&sensor=false&key=" + GOOGLE_API_KEY);
				var loader:URLLoader = new URLLoader(request);
				var geocodeReturn:Array;
				
				loader.addEventListener(ProgressEvent.PROGRESS,function(pe:ProgressEvent):void{
						trace("Searching...");	
				});
				
				loader.addEventListener(Event.COMPLETE, 
				function(e:Event){
					geocodeReturn = loader.data.split(',');
					
					if(!(geocodeReturn[2] == '0' || geocodeReturn[3] == '0')){
						trace(loader.data);
					} else
						trace("Location Invalid!");
					
					map.setCenter(new Location(Number(geocodeReturn[2]),Number(geocodeReturn[3])));
					selectorHandler(); // now that it's centered, we can load things normally!
				});
				
				//FIXME:quick default handler which catches the errors thrown when running on the web
				// (Flash's security model won't allow access to the google API) and defaults to a set location.
				loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function(e:Event){
					geocodeReturn = [0,0,37.813191355256826, -122.2976803779602];
					map.setCenter(new Location(Number(geocodeReturn[2]),Number(geocodeReturn[3])));
					selectorHandler();
				});
			}
			
			protected function airQualitySliderHandler():void{
				// update the timeline
				timeline.yMin = airQualitySlider.values[0];
				timeline.yMax = airQualitySlider.values[1];
				timeline.refresh(false); // we choose false to avoid the timeline recalculating the min/maxes for us
				
				// update the _plotlayer
				_plotLayer.yMin = airQualitySlider.values[0];
				_plotLayer.yMax = airQualitySlider.values[1];
				_plotLayer.refresh(false); // we choose false to avoid rebuilding the quadtree
				
				dispatchUpdated(); // called for IStatefulVis
			}
			
			protected function episodesHandler():void{
				if(_dataSets.length > 0){
					timelinesHolder.width = 300; // set the width only when there ARE episodes in there
					var ds:AirQualityDataSet = _dataSets[0]; // FIXME only looks at the first plotted data set right now
					var peaks:Array = ds.stats.getSpikes();
					addTimelines(peaks.slice(Math.max(peaks.length-11,0),Math.max(peaks.length-1,0)));
				} else{
					triggerInputErrorPopup();
				}
			}
			
			protected function destroyEpisodes():void{
				timelinesHolder.removeAllChildren();
				timelinesHolder.width = 0;
			}
			
			protected function addTimelines(episodes:Array):void{
				episodes = episodes.reverse();
				var epIndex:Object = {};
				for each(var e:Object in episodes){
					var t:AirQualityTimeLine = new AirQualityTimeLine();
					t.percentWidth = 100;
					t.height = timelinesHolder.height * 0.95 / episodes.length;
					t.margin = 8;
					t.noControls = true;
					t.dataSets = _dataSets;
					t.xBottom = e.beginTime;
					t.xTop = e.endTime;
					_timelines.push(t);
					
					
					timelinesHolder.addChild(t);
					t.addEventListener(FlexEvent.CREATION_COMPLETE, function(fe:FlexEvent):void{
							var tl:AirQualityTimeLine = fe.target as AirQualityTimeLine;
							setupEpisodesTimeline(tl);
							t.setStyle("borderStyle","solid");
							t.setStyle("borderColor",0xFFFFFFFF);
							tl.refresh();
						});
					
					//label
					var l:Label = new Label();
					var eTime:Date = new Date(e.beginTime*1000);
					l.htmlText = eTime.toLocaleDateString() + " <b>" + eTime.toLocaleTimeString() + "</b>";
					l.setStyle("paddingTop",-t.height);
					l.setStyle("paddingBottom",t.height - 15);
					l.setStyle("color","0x666666");
					timelinesHolder.addChild(l);	
						
					/* t.addEventListener(MouseEvent.MOUSE_OVER, function(fme:Event):void{
							var tm:AirQualityTimeLine = fme.currentTarget as AirQualityTimeLine;
							_plotLayer.minTime = tm.xBottom;
							_plotLayer.maxTime = tm.xTop;
						});
					t.addEventListener(MouseEvent.MOUSE_OUT, function(foe:Event):void{
							_plotLayer.minTime = int.MIN_VALUE;
							_plotLayer.maxTime = int.MAX_VALUE;
							_plotLayer.refresh();
						});		
						
					t.addEventListener(DataPointEvent.HOVER, function(fde:DataPointEvent):void{
							panAndZoomTo(new Location(fde.dataPoint.lat, fde.dataPoint.lon),map.getZoom());
						});	 */	
						
				}
			}
			
			protected function buildURL(map:TweenMap, timeline:AirQualityTimeLine, badgeId:String=null):String{
				var url:String = BASE_DB_QUERY_URL + "?badge_id=" + (badgeId ? badgeId : fileBadgeList.selectedItem.id) + 
				 		"&reading=" + pollutantList.selectedItem.db; 
				if(dateChooser.selectedRanges.length > 0 && dateChooser.selectedRanges[0]){
					url += "&start_time=" + (dateChooser.selectedRanges[0].rangeStart as Date).time / 1000 +
						"&end_time=" + ((dateChooser.selectedRanges[0].rangeEnd as Date).time / 1000 + 3600 * 24) +					
						"&lat_min=" + map.getExtent().south +
						"&lat_max=" + map.getExtent().north +
						"&lon_min=" + map.getExtent().west + 
						"&lon_max=" + map.getExtent().east +
						"&window_width=" + map.width + 
						"&window_height=" + map.height +
						"&timeline_length=" + timeline.width +
						"&timeline_height=" + timeline.height;
				}
				trace(url);		 		
				return url;
			}
			
			protected function buildName(badgeName:String):String{
				var name:String = badgeName + " " + pollutantList.selectedItem.pollutant;
				if(dateChooser.selectedRanges.length > 0 && dateChooser.selectedRanges[0]){
					name += (" (" + (dateChooser.selectedRanges[0].rangeStart as Date).toLocaleDateString() + " - " + 
			       			(dateChooser.selectedRanges[0].rangeEnd as Date).toLocaleDateString() + ")");
				}				 		
				return name;
			}
			
		]]>
	</mx:Script>
	<mx:Style source="assets/commonsensestyles.css"/>
	
</mx:Application>
